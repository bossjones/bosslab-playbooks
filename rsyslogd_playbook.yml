---
##############################################################################
# SERVERS: Install and configure rsyslogd
##############################################################################
- hosts: servers
  name: bootstrap servers before running rsyslogd
  gather_facts: True
  become: yes
  become_method: sudo
  vars:
    bossjones__user: vagrant
    bossjones__group: vagrant
    timezone: 'America/New_York'
  environment:
    DEBIAN_FRONTEND: noninteractive
  roles:
    - role: boss-ansible-role-update-hosts
      boss__update__hosts__hosts_file: /etc/hosts
      # ansible group to use when finding ip addresses
      boss__update__hosts__ansible_group: "servers"

      boss__update__hosts__networking_interface: "enp0s8" # enp0s8 (if vagrant)

      ### NEW vars
      # SOURCE: https://github.com/bertvv/ansible-role-hosts/blob/master/defaults/main.yml

      boss__update__hosts__hosts_playbook_version: "1.0.1"

      # If set to true, an entry for `ansible_hostname`, bound to the host's default IPv4 address is added added.
      boss__update__hosts__hosts_add_default_ipv4: true

      # If set to true, basic IPv6 entries (localhost6, ip6-localnet, etc) are added.
      boss__update__hosts__hosts_add_basic_ipv6: true

      # If set to true, an entry for every host managed by Ansible is added. Remark that this makes `boss__update__hosts__hosts_add_default_ipv4` unnecessary, as it will be added as wel by this setting.
      boss__update__hosts__hosts_add_ansible_managed_hosts: true

      # Select specific groups of Ansible managed hosts to be added in the hosts file.
      boss__update__hosts__hosts_add_ansible_managed_hosts_groups: ['servers']

      # Custom hosts entries to be added
      boss__update__hosts__hosts_entries: []

      # Custom host file snippets to be added
      boss__update__hosts__hosts_file_snippets: []

      # IP protocol to use
      boss__update__hosts__hosts_ip_protocol: 'ipv4'

      # Network interface to use
      boss__update__hosts__hosts_network_interface: "{{ boss__update__hosts__networking_interface }}"

      # convenience variable that has ansible_ as part of name for dynamic loading
      boss__update__hosts__hosts_ansible_network_interface: "ansible_{{ boss__update__hosts__networking_interface }}"

      # Backup of previous host
      boss__update__hosts__host_file_backup: yes

      # Use old 'override' style or new 'smart' style
      boss__update__hosts__default_task: "smart"
      tags:
        - boss-ansible-role-update-hosts

    # - role: boss-ansible-role-bootstrap
    #   # Disable raw commands to avoid sudo issues.
    #   boss__bootstrap_raw: False
    #   # Don't set domain on Travis.
    #   boss__bootstrap_domain: ''
    #   # Try bootstrapping a different IP address to avoid idempotency loop.
    #   # boss__bootstrap_ipv4: '127.0.1.2'
    #   # boss__hosts_file: /etc/hosts.molecule
    #   boss__bootstrap_admin_default_users:
    #     - name: bossjones
    #   boss__bootstrap_admin_groups: [ 'admins', 'staff', 'adm', 'sudo', 'bossjones' ]
    #   boss__bootstrap_admin_system: False
    #   tags:
    #     - boss-ansible-role-bootstrap

    # - role: boss-ansible-role-core
    #   tags:
    #     - boss-ansible-role-core

    # - role: boss-ansible-role-fact
    #   tags:
    #     - boss-ansible-role-fact

    # - role: boss-ansible-role-environment
    #   tags:
    #     - boss-ansible-role-environment

    # - role: boss-ansible-role-etckeeper
    #   tags:
    #     - boss-ansible-role-etckeeper

    # # - role: geerlingguy.pip

    # - role: boss-ansible-role-timezone
    #   timezone: 'America/New_York'
    #   timezone_update_hardware_clock: False
    #   tags:
    #     - boss-ansible-role-timezone

    # - role: boss-ansible-role-ntp
    #   task: install
    #   bossjones__user: vagrant
    #   bossjones__group: vagrant
    #   timezone: 'America/New_York'
    #   timezone_update_hardware_clock: False
    #   # defaults file for ansible-ntp
    #   # Defines if host is ntp_master
    #   # set ntp_master to true on specific group_vars/group
    #   ntp_master: False

    #   # Define your ntp_master_servers
    #   ntp_master_servers:
    #     - 0.ubuntu.pool.ntp.org
    #     - 1.ubuntu.pool.ntp.org
    #     - 2.ubuntu.pool.ntp.org
    #     - 3.ubuntu.pool.ntp.org
    #   tags:
    #     - boss-ansible-role-ntp

    # - role: boss-ansible-role-debug
    #   boss__debug__debug_variables_file: '/tmp/ansible_variables'
    #   boss__debug__dump_dir: '/etc/ansible_dumps'
    #   boss__debug__dump_type: 'seperate' # seperate
    #   tags:
    #     - boss-ansible-role-debug

    # - role: boss-ansible-role-tools
    #   task: tools
    #   bossjones__user: vagrant
    #   bossjones__group: vagrant
    #   tags:
    #     - boss-ansible-role-tools

    # - role: boss-ansible-role-journald
    #   bossjones__user: vagrant
    #   bossjones__group: vagrant
    #   tags:
    #     - boss-ansible-role-journald

- hosts: masters
  name: (masters) - Install and configure rsyslogd
  gather_facts: True
  become: yes
  become_method: sudo
  environment:
    DEBIAN_FRONTEND: noninteractive
  vars:
    boss__ntp__timezone: 'America/New_York'

  roles:
    - role: ../
      boss__rsyslogd__rsyslog_install_bleeding_edge: True
      # boss__rsyslogd__rsyslog_force_remove_before_provision: True
      boss__rsyslogd__default_task: 'master'
      boss__rsyslogd__rsyslog_interface: 'enp0s8'
      # NOTE: https://docs.debops.org/en/master/ansible/roles/debops.rsyslog/getting-started.html
      # Enable network input channels and storage of remote logs in filesystem
      boss__rsyslogd__rsyslog_capabilities: [ 'network', 'remote-files' ]
      # boss__rsyslogd__rsyslog_capabilities: [ 'network', 'remote-files', 'debug' ]

      # Specify which subnets can send remote logs through the firewall
      # FIXME: https://blog.webernetz.net/2001db8-32-in-the-wild/
      # boss__rsyslogd__host_allow: [ '192.0.2.0/24', '2001:db8::/32' ]
      boss__rsyslogd__rsyslog_host_allow: [ '192.168.1.1/16' ]

      # SOURCE: https://www.rsyslog.com/sending-messages-to-a-remote-syslog-server/
      # Mask log forwarding configuration defined elsewhere
      boss__rsyslogd__rsyslog_forward: []
        # - '*.*  action(type="omfwd" target="{{boss__rsyslogd__rsyslog_master_ip}}" port="{{boss__rsyslogd__rsyslog_tcp_port}}" protocol="tcp" action.resumeRetryCount="100" queue.type="linkedList" queue.size="10000")'
      # *.*  action(type="omfwd" target="192.0.2.2" port="10514" protocol="tcp" action.resumeRetryCount="100" queue.type="linkedList" queue.size="10000")
      # this will de-couple the sending from the other logging actions,
      # and prevent delays when the remote system is not reachable. Also,
      # it will try to connect 100 times before it discards messages as
      # undeliverable.
      # the rest below is more or less a plain vanilla rsyslog.conf as
      # many distros ship it - it's more for your reference...
      boss__rsyslogd__rsyslog_group_forward: []
      # boss__rsyslogd__host_forward: []
      # boss__rsyslogd__rsyslog_host_forward:
      #   - '*.*  action(type="omfwd" target="{{boss__rsyslogd__rsyslog_master_ip}}" port="{{boss__rsyslogd__rsyslog_tcp_port}}" protocol="tcp" action.resumeRetryCount="100" queue.type="linkedList" queue.size="10000")'

      # Or, alternatively, forward logs to a different host
      # boss__rsyslogd__host_forward: [ '*.* @other.{{ ansible_domain }}' ]

      # Or, alternatively, forward logs to a different host
      # boss__rsyslogd__rsyslog_host_forward: [ '*.* @other.{{ ansible_domain }}' ]
      # {{ hostvars[groups[boss__rsyslogd__master_group_label][0]]['ansible_' + boss__kubernetes__kubeadm__nfs_interface].ipv4.address }}:{{ item.remote }}

      # {% if etcd_discovery == none and etcd_discovery_srv == none -%}
      # {% macro initial_cluster() -%}
      # {% for host in groups[etcd_peers_group] -%}
      #   {% if loop.last -%}
      # {{ host }}={{ etcd_peer_url_scheme }}://{{ hostvars[host][  "ansible_"+hostvars[host]["ansible_default_ipv4"]["interface"]  ]['ipv4']['address'] }}:{{ etcd_peer_port }}
      #   {%- else -%}
      # {{ host }}={{ etcd_peer_url_scheme }}://{{ hostvars[host][ "ansible_"+hostvars[host]["ansible_default_ipv4"]["interface"]  ]['ipv4']['address'] }}:{{ etcd_peer_port }},
      #   {%- endif -%}
      # {% endfor -%}
      # {% endmacro -%}
      # {% endif %}

      tags:
        - boss-ansible-role-rsyslogd


- hosts: nodes
  name: (nodes) - Install and configure rsyslogd
  gather_facts: True
  become: yes
  become_method: sudo
  environment:
    DEBIAN_FRONTEND: noninteractive
  vars:
    boss__ntp__timezone: 'America/New_York'

  roles:
    - role: ../
      boss__rsyslogd__rsyslog_install_bleeding_edge: True
      # boss__rsyslogd__rsyslog_force_remove_before_provision: True
      boss__rsyslogd__default_task: 'client'
      boss__rsyslogd__rsyslog_interface: 'enp0s8'
      # boss__rsyslogd__rsyslog_capabilities: [ 'network', 'remote-files', 'debug' ]
      boss__rsyslogd__rsyslog_forward:
        - '*.*  action(type="omfwd" target="{{boss__rsyslogd__rsyslog_master_ip}}" port="{{boss__rsyslogd__rsyslog_tcp_port}}" protocol="tcp" action.resumeRetryCount="100" queue.type="linkedList" queue.size="10000")'
        - '*.* @{{boss__rsyslogd__rsyslog_master_ip}}:{{boss__rsyslogd__rsyslog_tcp_port}}'
      tags:
        - boss-ansible-role-rsyslogd



- hosts: servers
  name: 'for debugging purposes, write /etc/rsyslog.d/* to /vagrant/HOST-rsyslog_unified.conf'
  gather_facts: True
  become: yes
  become_method: sudo
  vars:
    bossjones__user: vagrant
    bossjones__group: vagrant
    timezone: 'America/New_York'
  environment:
    DEBIAN_FRONTEND: noninteractive

  tasks:

    - name: "for debugging purposes, write /etc/rsyslog.d/* to /vagrant/HOST-rsyslog_unified.conf"
      shell: |
        > /vagrant/{{ ansible_fqdn }}-rsyslog_unified.conf

        for f in /etc/rsyslog.d/*; do
          echo ""
          echo "#---------------------------------------------------------------------------" | tee -a /vagrant/{{ ansible_fqdn }}-rsyslog_unified.conf
          echo "# file: $f" | tee -a /vagrant/{{ ansible_fqdn }}-rsyslog_unified.conf
          echo "#---------------------------------------------------------------------------" | tee -a /vagrant/{{ ansible_fqdn }}-rsyslog_unified.conf
          echo ""
          echo ""
          cat ${f} | tee -a /vagrant/{{ ansible_fqdn }}-rsyslog_unified.conf
        done
      become: yes
