---
#
# FIXME: I feel like we need to do something with this
# 12/30/2018
# rsyslog_pools

# sudo add-apt-repository ppa:adiscon/v8-stable
# sudo apt-get update
boss__rsyslogd__rsyslog_force_remove_before_provision: False

boss__rsyslogd__rsyslog_install_bleeding_edge: False

boss__rsyslogd__rsyslog_enable_debug: True

# - name: Install rsyslog repo for Ubuntu

#     # Add repo
#     apt_repository: repo='ppa:adiscon/v8-stable' state=present
#     when: (ansible_distribution == 'Ubuntu') and ansible_lsb.id != ansible_lsb.id

#   - name: Update cache for Ubuntu

#     # Update apt cache
#     apt: update_cache=yes

#   - name: debian | ensuring rsyslog is installed
#     apt:
#       name: rsyslog
#       state: present
#     when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

# TODO:
# FIX FOR https://github.com/debops/ansible-rsyslog/issues/16#ref-issue-223964098
# - comment: 'Enable UDP support' options: |- module(load="imudp") state: '{{ "present" if (not rsyslog__send_over_tls_only) else "absent" }}'
# - comment: 'Enable TCP support' options: |- module(load="imptcp") state: '{{ "present" if (not rsyslog__send_over_tls_only | bool) else "absent" }}'

boss__rsyslogd__rsyslog_daemon: 'rsyslog'
boss__rsyslogd__rsyslog_daemon_start_flags: '-dn'

boss__rsyslogd__master_group_label: 'masters'

boss__rsyslogd__default_task: 'master'
boss__rsyslogd__rsyslog_enabled: True

# boss__rsyslogd__rsyslog_interface: 'enp0s8'
boss__rsyslogd__rsyslog_interface: 'eth0'
# dynamic variable creation
# SOURCE: https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
rsyslogd_master_ip_list: "{{ groups[boss__rsyslogd__master_group_label] | map('extract', hostvars, ['ansible_' + boss__rsyslogd__rsyslog_interface, 'ipv4', 'address']) | list }}"


boss__rsyslogd__rsyslog_master_ip: "{{ hostvars[groups[boss__rsyslogd__master_group_label][0]]['ansible_' + boss__rsyslogd__rsyslog_interface].ipv4.address }}"

# Default to master server for now
boss__rsyslogd__rsyslog_statsd_ip: "{{ hostvars[groups[boss__rsyslogd__master_group_label][0]]['ansible_' + boss__rsyslogd__rsyslog_interface].ipv4.address }}"


# network
# Enable support for receiving the logs over the network, via UDP or TCP connections. By default you also need to specify the CIDR subnets or IP addresses which are allowed through the firewall using rsyslog__allow, rsyslog__group_allow and/or rsyslog__host_allow variables.
# remote-files
# Enable storage of remote logs as files in /var/log/remote/ directory. If this is not enabled, by default remote logs will be discarded due to being directed to a separate remote ruleset.
boss__rsyslogd__rsyslog_capabilities: ['remote-files', 'network']
#
boss__rsyslogd__rsyslog_unprivileged: '{{ "True"
                           if (ansible_distribution in [ "Ubuntu" ])
                           else "False" }}'
# FIXME: Enable this
boss__rsyslogd__rsyslog_message_reduction: True
#

# librelp-dev - Reliable Event Logging Protocol (RELP) library - development files
# librelp0 - Reliable Event Logging Protocol (RELP) library
# rsyslog-relp - RELP protocol support for rsyslog
# rsyslog-dbgsym - debug symbols for package rsyslog
# librelp0-dbgsym - debug symbols for package librelp0
# rsyslog-relp-dbgsym - debug symbols for package rsyslog-relp

boss__rsyslogd__rsyslog_mandatory_packages: [ 'ca-certificates' ]
boss__rsyslogd__rsyslog_base_packages: [ 'rsyslog' ]
#
boss__rsyslogd__rsyslog_tls_packages: [ 'rsyslog-gnutls', 'ca-certificates' ]

boss__rsyslogd__rsyslog_default_packages: ['librelp-dev', 'librelp0', 'rsyslog-relp']

boss__rsyslogd__rsyslog_bleeding_edge_packages: ['liblognorm2', 'librelp0', 'rsyslog', 'libfastjson4']
#
boss__rsyslogd__rsyslog_packages: '{{ boss__rsyslogd__rsyslog_default_packages if not boss__rsyslogd__rsyslog_install_bleeding_edge|bool else boss__rsyslogd__rsyslog_bleeding_edge_packages }}'
#
boss__rsyslogd__rsyslog_user: '{{ "syslog" if boss__rsyslogd__rsyslog_unprivileged|bool else "root" }}'
#
boss__rsyslogd__rsyslog_group: '{{ "syslog" if boss__rsyslogd__rsyslog_unprivileged|bool else "root" }}'
#
boss__rsyslogd__rsyslog_home: '{{ "/home/syslog"
                   if (ansible_distribution in [ "Ubuntu" ])
                   else "/var/log" }}'
#
boss__rsyslogd__rsyslog_file_owner: '{{ boss__rsyslogd__rsyslog_user }}'
#
boss__rsyslogd__rsyslog_file_group: 'adm'
#
boss__rsyslogd__rsyslog_default_logfiles:
  - '/var/log/syslog'
  - '/var/log/kern.log'
  - '/var/log/auth.log'
  - '/var/log/user.log'
  - '/var/log/daemon.log'
  - '/var/log/messages'
  - '/var/log/mail.log'
  - '/var/log/mail.info'
  - '/var/log/mail.warn'
  - '/var/log/mail.err'
  - '/var/log/cron.log'
  - '/var/log/lpr.log'
  - '/var/log/debug'
  - '/var/log/messages'
#
boss__rsyslogd__rsyslog_pki: '{{ True
                  if (ansible_local|d() and ansible_local.pki|d() and
                      ansible_local.pki.enabled|bool)
                  else False }}'
#
boss__rsyslogd__rsyslog_pki_path: '{{ ansible_local.pki.path
                       if (ansible_local|d() and ansible_local.pki|d() and
                           ansible_local.pki.path|d())
                       else "/etc/pki" }}'
#
boss__rsyslogd__rsyslog_pki_realm: '{{ ansible_local.pki.realm
                        if (ansible_local|d() and ansible_local.pki|d() and
                            ansible_local.pki.realm|d())
                        else "domain" }}'
#
boss__rsyslogd__rsyslog_pki_ca: '{{ ansible_local.pki.ca
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.ca|d())
                      else "CA.crt" }}'
#
boss__rsyslogd__rsyslog_pki_crt: '{{ ansible_local.pki.crt
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.crt|d())
                      else "default.crt" }}'
#
boss__rsyslogd__rsyslog_pki_key: '{{ ansible_local.pki.key
                      if (ansible_local|d() and ansible_local.pki|d() and
                          ansible_local.pki.key|d())
                      else "default.key" }}'
#
boss__rsyslogd__rsyslog_default_netstream_driver: '{{ "gtls"
                                       if (boss__rsyslogd__rsyslog_pki|bool and
                                           "tls" in boss__rsyslogd__rsyslog_capabilities)
                                       else "ptcp" }}'
#
boss__rsyslogd__rsyslog_default_driver_authmode: "x509/name"
#
boss__rsyslogd__rsyslog_send_over_tls: |-
  $ActionSendStreamDriver gtls
  $ActionSendStreamDriverAuthMode {{ boss__rsyslogd__rsyslog_default_driver_authmode }}
  {% if boss__rsyslogd__rsyslog_default_driver_authmode != "anon" %}
  {%   if boss__rsyslogd__rsyslog_send_permitted_peers is string %}
  $ActionSendStreamDriverPermittedPeer {{ boss__rsyslogd__rsyslog_send_permitted_peers }}
  {%   else %}
  {%     for peer in boss__rsyslogd__rsyslog_send_permitted_peers %}
  $ActionSendStreamDriverPermittedPeer {{ peer }}
  {%     endfor %}
  {%   endif %}
  {% endif %}
  $ActionSendStreamDriverMode 1
#
boss__rsyslogd__rsyslog_send_over_tls_only: False

# The default DNS domain used to accept remote incoming logs from remote hosts.
boss__rsyslogd__rsyslog_domain: '{{ ansible_domain if ansible_domain else ansible_hostname }}'
#
boss__rsyslogd__rsyslog_permitted_peers: [ '*.{{ boss__rsyslogd__rsyslog_domain }}' ]
#
boss__rsyslogd__rsyslog_send_permitted_peers: '{{ boss__rsyslogd__rsyslog_permitted_peers }}'
#
boss__rsyslogd__rsyslog_udp_port: '514'
#
boss__rsyslogd__rsyslog_relp_port: '2514'

boss__rsyslogd__rsyslog_tcp_port: '514'
#
boss__rsyslogd__rsyslog_tcp_tls_port: '6514'

# List of IP addresses or CIDR subnets which should be allowed to connect to
# ``rsyslogd`` ports by the firewall. This variable should be used for all
# hosts in the inventory.
boss__rsyslogd__rsyslog_allow: []

# List of IP addresses or CIDR subnets which should be allowed to connect to
# ``rsyslogd`` ports by the firewall. This variable should be used for specific
# group of hosts in the inventory.
boss__rsyslogd__rsyslog_group_allow: []

# List of IP addresses or CIDR subnets which should be allowed to connect to
# ``rsyslogd`` ports by the firewall. This variable should be used for specific
# hosts in the inventory.
boss__rsyslogd__rsyslog_host_allow: []
#
boss__rsyslogd__rsyslog_forward: []
#
boss__rsyslogd__rsyslog_group_forward: []
#
boss__rsyslogd__rsyslog_host_forward: []
#
#
#
boss__rsyslogd__rsyslog_weight_map:
  'global':    '05'
  'module':    '10'
  'modules':   '10'
  'template':  '20'
  'templates': '20'
  'output':    '30'
  'service':   '30'
  'rule':      '50'
  'rules':     '50'
  'ruleset':   '50'
  'input':     '90'
#
boss__rsyslogd__rsyslog_rules: []
#
boss__rsyslogd__rsyslog_group_rules: []
#
boss__rsyslogd__rsyslog_host_rules: []
#
boss__rsyslogd__rsyslog_dependent_rules: []
#boss__rsyslog__rsyslog_default_rules
boss__rsyslogd__rsyslog_default_rules:
  - '{{ boss__rsyslogd__rsyslog_conf_global_options }}'
  - '{{ boss__rsyslogd__rsyslog_conf_local_modules }}'
  - '{{ boss__rsyslogd__rsyslog_conf_network_modules }}'
  - '{{ boss__rsyslogd__rsyslog_conf_common_defaults }}'
  - '{{ boss__rsyslogd__rsyslog_conf_divert_ubuntu }}'
  - '{{ boss__rsyslogd__rsyslog_conf_filename_templates }}'
  - '{{ boss__rsyslogd__rsyslog_conf_remote_forward }}'
  - '{{ boss__rsyslogd__rsyslog_conf_default_rulesets }}'
  - '{{ boss__rsyslogd__rsyslog_conf_system_rules }}'
  - '{{ boss__rsyslogd__rsyslog_conf_system_cron }}'
  - '{{ boss__rsyslogd__rsyslog_conf_network_input }}'
  - '{{ boss__rsyslogd__rsyslog_conf_dynamic_logs }}'
  - '{{ boss__rsyslogd__rsyslog_conf_stop_remote }}'
#
boss__rsyslogd__rsyslog_conf_global_options:
  - filename: '00-global.conf'
    comment: |
      | Global options
      | -------------------------------------------------------------------------------------------
      | Network Stream Drivers: https://www.rsyslog.com/doc/netstream.html
      | -------------------------------------------------------------------------------------------
      | Network stream drivers are a layer between various parts of rsyslogd (e.g. the imtcp module)
      | and the transport layer. They provide sequenced delivery, authentication and confidentiality
      | to the upper layers. Drivers implement different capabilities.
      |
      | Users need to know about netstream drivers because they need to configure the proper driver,
      | and proper driver properties, to achieve desired results (e.g. a TLS-protected syslog
      | transmission).
      | -------------------------------------------------------------------------------------------

      | -------------------------------------------------------------------------------------------
      | ptcp - the plain tcp network transport (no security): https://www.rsyslog.com/doc/ns_ptcp.html
      | -------------------------------------------------------------------------------------------
      | Network stream drivers are a layer between various parts of rsyslogd (e.g. the imtcp module)
      | and the transport layer. They provide sequenced delivery, authentication and confidentiality
      | to the upper layers. Drivers implement different capabilities.
      |
      | Users need to know about netstream drivers because they need to configure the proper driver,
      | and proper driver properties, to achieve desired results (e.g. a TLS-protected syslog
      | transmission).
      | -------------------------------------------------------------------------------------------
    options: |-
      global(
        defaultNetstreamDriver="{{ boss__rsyslogd__rsyslog_default_netstream_driver }}"
      {% if boss__rsyslogd__rsyslog_pki|bool and "tls" in boss__rsyslogd__rsyslog_capabilities %}
        defaultNetstreamDriverCAFile="{{ boss__rsyslogd__rsyslog_pki_path + '/' + boss__rsyslogd__rsyslog_pki_realm + '/' + boss__rsyslogd__rsyslog_pki_ca }}"
      {%   if boss__rsyslogd__rsyslog_default_driver_authmode != "anon" or "network" in boss__rsyslogd__rsyslog_capabilities %}
        defaultNetstreamDriverCertFile="{{ boss__rsyslogd__rsyslog_pki_path + '/' + boss__rsyslogd__rsyslog_pki_realm + '/' + boss__rsyslogd__rsyslog_pki_crt }}"
        defaultNetstreamDriverKeyFile="{{ boss__rsyslogd__rsyslog_pki_path + '/' + boss__rsyslogd__rsyslog_pki_realm + '/' + boss__rsyslogd__rsyslog_pki_key }}"
      {%   endif %}
      {% endif %}
      )
#
boss__rsyslogd__rsyslog_conf_local_modules:
  - name: 'local-modules'
    type: 'modules'
    sections:
      - comment: |
          | Log messages sent to local UNIX socket
          | -------------------------------------------------------------------------------------------
          | imuxsock: Unix Socket Input - rsyslog.readthedocs.io/en/latest/configuration/modules/imuxsock.html?highlight=OmitLocalLogging
          | -------------------------------------------------------------------------------------------
          | $OmitLocalLogging (imuxsock) [on/off] - The inverse of SysSock.Use.
          | $SystemLogSocketName <name-of-socket> equivalent to: SysSock.Name
          | SysSock.Use (imuxsock) [on/off] - Listen on the local log socket. This is most useful if you run multiple instances of rsyslogd where only one shall handle the system log socket.
          | -------------------------------------------------------------------------------------------
          | OLD CONFIG: 1/1/2019
          | $ModLoad imuxsock
          | $OmitLocalLogging off
          | $SystemLogSocketName /run/systemd/journal/syslog
          | SysSock.IgnoreTimestamp="off"
          |
          |
          | SOURCE: https://www.rsyslog.com/doc/v8-stable/configuration/modules/imuxsock.html
          | Step 1: Select name of system socket
          | If the user has not explicitly chosen to set SysSock.Use="off" then the default listener socket (aka, "system log socket" or simply "system socket") name is set to /dev/log. Otherwise, if the user has explicitly set SysSock.Use="off", then rsyslog will not listen on /dev/log OR any socket defined by the SysSock.Name parameter and the rest of this section does not apply.
          | If the user has specified sysSock.Name="/path/to/custom/socket" (and not explicitly set SysSock.Use="off"), then the default listener socket name is overwritten with /path/to/custom/socket.
          | Otherwise, if rsyslog is running under systemd AND /run/systemd/journal/syslog exists, (AND the user has not explicitly set SysSock.Use="off") then the default listener socket name is overwritten with /run/systemd/journal/syslog.

        options: |-
          module(load="imuxsock" SysSock.RateLimit.Interval="0" SysSock.Use="off" SysSock.IgnoreTimestamp="off" SysSock.Name="/run/systemd/journal/syslog")

      - comment: 'Log kernel messages'
        options: |-
          $ModLoad imklog
          $KLogPermitNonKernelFacility on
        state: '{{ "present"
                  if (ansible_local|d() and ansible_local.cap12s|d() and
                      (not ansible_local.cap12s.enabled|bool or
                       "cap_sys_admin" in ansible_local.cap12s.list))
                  else "absent" }}'

      - comment: 'Log periodic -- MARK -- messages'
        options: |-
          $ModLoad immark
          $MarkMessagePeriod {{ (60 * 60) }}
        state: '{{ "absent"
                  if ("!mark" in boss__rsyslogd__rsyslog_capabilities)
                  else "present" }}'

      - comment: |
          | Log messages in journald using module imjournal
          | -------------------------------------------------------------------------------------------
          | https://rsyslog.readthedocs.io/en/latest/configuration/modules/imjournal.html
          | SOURCE: https://docs.fedoraproject.org/en-US/Fedora/23/html/System_Administrators_Guide/s1-interaction_of_rsyslog_and_journal.html
          | SOURCE: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/s1-interaction_of_rsyslog_and_journal
          | -------------------------------------------------------------------------------------------
          |
          | -------------------------------------------------------------------------------------------
        options: |-
          module(load="imjournal" PersistStateInterval="100" Ratelimit.Interval="60" Ratelimit.Burst="20000" StateFile="/var/spool/rsyslog/imjournal.state")
        state: present
        # $ModLoad imjournal
        # $imjournalPersistStateInterval 100
        # $imjournalStateFile /var/spool/rsyslog/imjournal.state

      - comment: |
          load mmjsonparse module for structured logs
        options: |-
          module(load="mmjsonparse")
        state: present
        # $ModLoad mmjsonparse

      - comment: |
          load omstdout module - This module writes any messages that are passed to it to stdout. It was developed for the rsyslog test suite. However, there may (limited) exist some other usages. Please note we do not put too much effort on the quality of this module as we do not expect it to be used in real deployments. If you do, please drop us a note so that we can enhance its priority!
        options: |-
          module(load="omstdout")
        state: '{{ "present"
              if ("stdout" in boss__rsyslogd__rsyslog_capabilities)
              else "absent" }}'

      - comment: |
          SOURCE: https://www.rsyslog.com/how-to-use-impstats/
          load impstats module - This will start generating logs tagged with "rsyslogd-pstats" every 600 seconds
        options: |-
          module(load="impstats" log.syslog="on" ruleset="from_pstats" format="json" resetCounters="on" interval="10")
        state: '{{ "present"
              if ("stats" in boss__rsyslogd__rsyslog_capabilities)
              else "absent" }}'

      - comment: |
          $DebugFile /tmp/rsyslogd.debug.log

          Another example:

          action(type="omfile"
                 file="/tmp/rsyslogd.debug.log"
                 template="RSYSLOG_DebugFormat"
                 dirCreateMode="0755"
                 FileCreateMode="0644"
          )
        options: |-
          $DebugFile /tmp/rsyslogd.debug.log
          $DebugLevel 2
        state: '{{ "present"
                  if (boss__rsyslogd__rsyslog_enable_debug)
                  else "absent" }}'
#
boss__rsyslogd__rsyslog_conf_network_modules:
  - name: 'network-modules'
    type: 'modules'
    state: '{{ "present"
              if ("network" in boss__rsyslogd__rsyslog_capabilities)
              else "absent" }}'
    sections:
      - comment: 'Enable UDP support'
        options: |-
          module(load="imudp" threads="2" timeRequery="8" batchSize="128")
        state: '{{ "present"
                  if (not boss__rsyslogd__rsyslog_send_over_tls_only)
                  else "absent" }}'
      - comment: 'Enable TCP support'
        options: |-
          module(load="imtcp" threads="3")
        state: '{{ "present"
                  if (not boss__rsyslogd__rsyslog_send_over_tls_only)
                  else "absent" }}'
      - comment: 'Enable GnuTLS TCP support'
        options: |-
          module(
            load="imtcp"
            streamDriver.name="gtls"
            streamDriver.mode="1"
            streamDriver.authMode="{{ boss__rsyslogd__rsyslog_default_driver_authmode }}"
          {% if boss__rsyslogd__rsyslog_default_driver_authmode != "anon" %}
            {% if boss__rsyslogd__rsyslog_permitted_peers is string %}
              permittedPeer="{{ boss__rsyslogd__rsyslog_permitted_peers }}"
            {% else %}
              permittedPeer=["{{ boss__rsyslogd__rsyslog_permitted_peers | join('","') }}"]
            {% endif %}
          {% endif %}
          )
        state: '{{ "present"
                  if ("tls" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'
#
boss__rsyslogd__rsyslog_conf_network_input:
  - name: 'network-input'
    type: 'input'
    state: '{{ "present"
              if ("network" in boss__rsyslogd__rsyslog_capabilities)
              else "absent" }}'
    sections:
      - comment: 'Log messages from remote hosts over UDP'
        options: |-
          input(
            type="imudp"
            port="{{ boss__rsyslogd__rsyslog_udp_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if (not boss__rsyslogd__rsyslog_send_over_tls_only)
                  else "absent" }}'
      - comment: 'Log messages from remote hosts over TCP'
        options: |-
          input(
            type="imtcp"
            port="{{ boss__rsyslogd__rsyslog_tcp_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if (not boss__rsyslogd__rsyslog_send_over_tls_only)
                  else "absent" }}'
      - comment: 'Log messages from remote hosts over TLS'
        options: |-
          input(
            type="imtcp"
            name="imtls"
            port="{{ boss__rsyslogd__rsyslog_tcp_tls_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if ("tls" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'

      - comment: 'Log messages from remote hosts over TCP using relp SEE: https://manpages.ubuntu.com/manpages/xenial/man5/rsyslog.conf.5.html'
        options: |-
          input(
            type="imrelp"
            port="{{ boss__rsyslogd__rsyslog_relp_port }}"
            ruleset="remote"
          )
        state: '{{ "present"
                  if ("relp" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'

      - comment: 'Log dpkg messages from inside docker container to jsonize ruleset'
        options: |-
          input(type="imfile" File="/hostfs/var/log/dpkg.log" Tag="dpkg:" PersistStateInterval="100" Ruleset="jsonize" freshStartTail="on")
        state: '{{ "present"
                  if ("docker_dpkg" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'

      - comment: 'Log history.log messages from inside docker container to jsonize ruleset'
        options: |-
          input(type="imfile" File="/hostfs/var/log/apt/history.log" Tag="apt:" PersistStateInterval="100" Ruleset="jsonize" freshStartTail="on")
        state: '{{ "present"
                  if ("docker_history" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'


      - comment: 'Log socket /logging_agent/dev/log messages from inside docker container to jsonize ruleset'
        options: |-
          input(type="imuxsock" Socket="/logging_agent/dev/log" Ruleset="jsonize" CreatePath="on")
        state: '{{ "present"
                  if ("docker_log_socket" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'

      # ENABLE THIS?
      # -----------------------------------------------
      # $ModLoad imtcp
      # $ModLoad omjournal

      # $RuleSet remote
      # *.* :omjournal:

      # $InputTCPServerBindRuleset remote
      # $InputTCPServerRun 10514
      # -----------------------------------------------
      # - comment: 'Forwards all received messages on tcp port 10514 to the Journal'
      #   options: |-
      #     input(
      #       type="imudp"
      #       port="{{ boss__rsyslogd__rsyslog_udp_port }}"
      #       ruleset="remote"
      #     )
#
boss__rsyslogd__rsyslog_conf_common_defaults:
  - name: 'common-defaults'
    type: 'global'
    sections:
      - comment: 'Set default permissions for all log files'
        options: |-
          $FileOwner {{ boss__rsyslogd__rsyslog_file_owner }}
          $FileGroup {{ boss__rsyslogd__rsyslog_file_group }}
          $FileCreateMode 0640
          $DirCreateMode 0755
          $Umask 0022
          {% if boss__rsyslogd__rsyslog_unprivileged|bool %}
          $PrivDropToUser {{ boss__rsyslogd__rsyslog_user }}
          $PrivDropToGroup {{ boss__rsyslogd__rsyslog_group }}
          {% endif %}
      - comment: 'Where to place spool and state files'
        options: |-
          $WorkDirectory /var/spool/rsyslog
      - comment: 'Log every message'
        options: |-
          $RepeatedMsgReduction {{ "on" if boss__rsyslogd__rsyslog_message_reduction|bool else "off" }}
#
boss__rsyslogd__rsyslog_conf_divert_ubuntu:
  - filename: '20-ufw.conf'
    divert: True
    divert_to: '65-ufw.system'
    state: '{{ "present"
               if (ansible_distribution in [ "Ubuntu" ])
               else "absent" }}'
  - filename: '50-default.conf'
    divert: True
    state: '{{ "present"
               if (ansible_distribution in [ "Ubuntu" ])
               else "absent" }}'
#
boss__rsyslogd__rsyslog_conf_filename_templates:
  - name: 'templates'
    type: 'template'
    sections:
      # - comment: 'Remote host system logs'
      #   # string="%TIMESTAMP% %HOSTNAME% %syslogtag% @cee: %$!all-json%\n"
      #   options: |-
      #     template(
      #       name="CEETemplate"
      #       type="string"
      #       string="%TIMESTAMP% %HOSTNAME% %syslogtag% @cee: %$!all-json%\n"
      #     )

      # # NOTE: This might work
      # - comment: 'Remote host journald logs'
      #   options: |-
      #     template(
      #       name="CEETemplate"
      #       type="string"
      #       string="<%PRI%>%TIMESTAMP:::date-rfc3339% %HOSTNAME% %!syslogtag% @cee: %$!all-json-plain%"
      #     )

      # - comment: |
      #     timestamp templates RFC 3339
      #     INFO: http://cbas.pandion.im/2009/10/generating-rfc-3339-timestamps-in.html
      #     INFO: https://stackoverflow.com/questions/7244246/generate-an-rfc-3339-timestamp-similar-to-google-tasks-api
      #     EXAMPLE: 2011-08-30T09:30:16.768-04:00

      #   options: |-
      #     template(name="timestampRFC3339" type="string" string="%timestamp:::date-rfc3339%")

      # - comment: 'StatsD protocol templates - kernel'
      #   options: |-
      #     template(name="StatsDkernelOOM" type="string" string="syslog.kernel.%HOSTNAME%.oom:1|c\n")
      #     template(name="StatsDkernelKill" type="string" string="syslog.kernel.%HOSTNAME%.kill:1|c\n")
      #     template(name="StatsDkernelOops" type="string" string="syslog.kernel.%HOSTNAME%.oops:1|c\n")
      #     template(name="StatsDkernelSegfault" type="string" string="syslog.kernel.%HOSTNAME%.segfault:1|c\n")
      #     template(name="StatsDQueue" type="list") {
      #             string(value="log_agent_%HOSTNAME%.queue.")
      #             property(name="$!name")
      #             constant(value=".size:")
      #                 property(name="$!size")
      #                 constant(value="|g\n")
      #             string(value="log_agent_%HOSTNAME%.queue.")
      #             property(name="$!name")
      #             constant(value=".enqueued:")
      #                 property(name="$!enqueued")
      #                 constant(value="|c\n")
      #             string(value="log_agent_%HOSTNAME%.queue.")
      #             property(name="$!name")
      #             constant(value=".discarded_full:")
      #                 property(name="$!discarded.full")
      #                 constant(value="|c\n")
      #             string(value="log_agent_%HOSTNAME%.queue.")
      #             property(name="$!name")
      #             constant(value=".discarded_nf:")
      #                 property(name="$!discarded.nf")
      #                 constant(value="|c\n")
      #             string(value="log_agent_%HOSTNAME%.queue.")
      #             property(name="$!name")
      #             constant(value=".maxqsize:")
      #                 property(name="$!maxqsize")
      #                 constant(value="|g\n")
      #            }



      # - comment: 'StatsD protocol templates - journald'
      #   options: |-
      #     template(name="StatsDImJournal" type="list") {
      #              string(value="log_agent_%HOSTNAME%.imjournal.submitted:")
      #                  property(name="$!submitted")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.read:")
      #                  property(name="$!read")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.discarded:")
      #                  property(name="$!discarded")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.failed:")
      #                  property(name="$!failed")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.poll_failed:")
      #                  property(name="$!poll_failed")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.rotations:")
      #                  property(name="$!rotations")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.recovery_attempts:")
      #                  property(name="$!recovery_attempts")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.ratelimit_discarded_in_interval:")
      #                  property(name="$!ratelimit_discarded_in_interval")
      #                  constant(value="|c\n")
      #              string(value="log_agent_%HOSTNAME%.imjournal.disk_usage_bytes:")
      #                  property(name="$!disk_usage_bytes")
      #                  constant(value="|g\n")
      #             }



      - comment: 'Remote host system logs'
        options: |-
          template(
            name="RemoteHostSyslog"
            type="string"
            string="/var/log/remote/hosts/%HOSTNAME%/syslog"
          )
      - comment: 'Remote host auth logs'
        options: |-
          template(
            name="RemoteHostAuthLog"
            type="string"
            string="/var/log/remote/hosts/%HOSTNAME%/auth.log"
          )
      - comment: 'Remote host cron logs'
        options: |-
          template(
            name="RemoteHostCronLog"
            type="string"
            string="/var/log/remote/hosts/%HOSTNAME%/cron.log"
          )
      - comment: 'Remote service auth logs'
        options: |-
          template(
            name="RemoteServiceAuthLog"
            type="string"
            string="/var/log/remote/services/auth/auth.log"
          )
      - comment: 'Remote service cron logs'
        options: |-
          template(
            name="RemoteServiceCronLog"
            type="string"
            string="/var/log/remote/services/cron/cron.log"
          )
      - comment: 'Remote service mail logs'
        options: |-
          template(
            name="RemoteServiceMailLog"
            type="string"
            string="/var/log/remote/services/mail/mail.log"
          )
      - comment: 'Include custom templates'
        options: |-
          $IncludeConfig /etc/rsyslog.d/*.template
      - comment: 'Use traditional timestamp format'
        options: |-
          $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat


        # template(name="CEETemplate" type="string" string="%TIMESTAMP% %HOSTNAME% %syslogtag% @cee: %$!all-json%\\n" )
#
boss__rsyslogd__rsyslog_conf_remote_forward:
  - filename: '20-remote-forward.system'
    state: '{{ "present"
               if (boss__rsyslogd__rsyslog_forward|d() or boss__rsyslogd__rsyslog_group_forward|d() or boss__rsyslogd__rsyslog_host_forward|d())
               else "absent" }}'
    sections:
      - comment: 'Forward logs over TLS by default'
        options: '{{ boss__rsyslogd__rsyslog_send_over_tls }}'
        state: '{{ "present"
                   if (boss__rsyslogd__rsyslog_pki|bool and
                       "tls" in boss__rsyslogd__rsyslog_capabilities)
                   else "absent" }}'
      - comment: 'Forward logs to specified hosts'
        options: |-
          {% for element in (boss__rsyslogd__rsyslog_forward + boss__rsyslogd__rsyslog_group_forward + boss__rsyslogd__rsyslog_host_forward) %}
          {{ element }}
          {% endfor %}
#
#
boss__rsyslogd__rsyslog_conf_default_rulesets:
  - name: 'default-rulesets'
    type: 'rules'
    sections:
      - comment: 'Rules for the local system logs'
        options: |-
          $IncludeConfig /etc/rsyslog.d/*.system
      - comment: 'Rules for logs incoming from remote hosts'
        options: |-
          ruleset(name="remote") {
            $IncludeConfig /etc/rsyslog.d/*.remote
          }
#
boss__rsyslogd__rsyslog_conf_system_rules:
  - filename: '50-default.system'
    sections:
      - comment: 'Standard log files, split by facility'
        options: |-
          auth,authpriv.*                /var/log/auth.log
          *.*;cron,auth,authpriv.none    -/var/log/syslog
          cron.*                         -/var/log/cron.log
          daemon.*                       -/var/log/daemon.log
          kern.*                         -/var/log/kern.log
          lpr.*                          -/var/log/lpr.log
          mail.*                         -/var/log/mail.log
          user.*                         -/var/log/user.log
      - comment: 'Copy of the local log files to complete remote logs'
        options: |-
          auth,authpriv.*                ?RemoteHostAuthLog
          auth,authpriv.*                ?RemoteServiceAuthLog
          *.*;cron,auth,authpriv.none    -?RemoteHostSyslog
          cron.*                         -?RemoteHostCronLog
          cron.*                         -?RemoteServiceCronLog
          mail.*                         -?RemoteServiceMailLog
        state: '{{ "present"
                   if ("remote-files" in boss__rsyslogd__rsyslog_capabilities)
                   else "absent" }}'
      - comment: |-
          Logging for the mail system. Split it up so that
          it is easy to write scripts to parse these files
        options: |-
          mail.info                      -/var/log/mail.info
          mail.warn                      -/var/log/mail.warn
          mail.err                       /var/log/mail.err
      - comment: 'Logging for INN news system'
        options: |-
          news.crit                      /var/log/news/news.crit
          news.err                       /var/log/news/news.err
          news.notice                    -/var/log/news/news.notice
        state: '{{ "absent"
                  if ("!news" in boss__rsyslogd__rsyslog_capabilities)
                  else "present" }}'
      - comment: 'Some "catch-all" log files'
        options: |-
          *.=debug;\
                  auth,authpriv.none;\
                  mail,news.none          -/var/log/debug
          *.=info;*.=notice;*.=warn;\
                  auth,authpriv.none;\
                  cron,daemon.none;\
                  mail,news.none          -/var/log/messages
      - comment: 'Emergencies are sent to everybody logged in'
        options: |-
          *.emerg                         :omusrmsg:*
      - comment: 'Send selected logs to xconsole'
        options: |-
          daemon.*;mail.*;\
                  *.=debug;*.=info;\
                  *.=notice;*.=warn       |/dev/xconsole
        state: '{{ "present"
                  if ("xconsole" in boss__rsyslogd__rsyslog_capabilities)
                  else "absent" }}'
#
boss__rsyslogd__rsyslog_conf_dynamic_logs:
  - filename: '40-dynamic-cron.remote'
    options: |
      if ($msg contains "pam_unix(cron:session): session opened for user") then {
        action(type="omfile" DynaFile="RemoteHostCronLog")
        action(type="omfile" DynaFile="RemoteServiceCronLog")
        stop
      } else if ($msg contains "pam_unix(cron:session): session closed for user") then {
        action(type="omfile" DynaFile="RemoteHostCronLog")
        action(type="omfile" DynaFile="RemoteServiceCronLog")
        stop
      }
    state: '{{ "present"
               if ("remote-files" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'
  - filename: '50-dynamic-logs.remote'
    comment: 'Store remote logs in separate logfiles'
    options: |-
      auth,authpriv.*                     ?RemoteHostAuthLog
      auth,authpriv.*                     ?RemoteServiceAuthLog
      *.*;cron,auth,authpriv.none         -?RemoteHostSyslog
      cron.*                              -?RemoteHostCronLog
      cron.*                              -?RemoteServiceCronLog
      mail.*                              -?RemoteServiceMailLog
    state: '{{ "present"
               if ("remote-files" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'

  # EXPERIMENTAL
  # NOTE: New configs from https://github.com/camptocamp/docker-rsyslog-agent-conf/blob/master/templates/rsyslog.conf.tmpl
  - filename: '60-forward.remote'
    options: |
      ruleset(
        name="forward"
        queue.type="LinkedList"
      ) {

        if ($!CONTAINER_TAG != "") then {
          unset $!SYSLOG_IDENTIFIER;
          set $!syslogtag = "containers:";
        } else {
          set $!syslogtag = $syslogtag;
        }

        action(type="omrelp"
              name="fwd_to_logserver"
              target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
              port="2514"
              template="CEETemplate"
              queue.type="LinkedList"
              queue.filename="fwd_queue"
              action.resumeretrycount="-1"
              queue.dequeuebatchsize="100"
              queue.saveonshutdown="on"
              queue.discardseverity="8"
              queue.timeoutenqueue="0"
              queue.maxdiskspace="1g"
              queue.highwatermark="4000"
              queue.lowwatermark="1000"
              queue.size="5000"
              queue.discardmark="4875"
              tls="off"
              rebindinterval="10000"
        )

        if ($!SYSLOG_IDENTIFIER == "kernel") then {
          if ($!MESSAGE contains "Out of memory") then {
            action(type="omfwd"
                  name="fwd_imudp_stats"
                  target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
                  protocol="udp"
                  port="8125"
                  template="StatsDkernelOOM"
            )
          } else if ($!MESSAGE contains "Killed process") then {
            action(type="omfwd"
                  name="fwd_imudp_stats"
                  target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
                  protocol="udp"
                  port="8125"
                  template="StatsDkernelKill"
            )
          } else if ($!MESSAGE contains "Call Trace") then {
            action(type="omfwd"
                  name="fwd_imudp_stats"
                  target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
                  protocol="udp"
                  port="8125"
                  template="StatsDkernelOops"
            )
          } else if ($!MESSAGE contains "segfault") then {
            action(type="omfwd"
                  name="fwd_imudp_stats"
                  target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
                  protocol="udp"
                  port="8125"
                  template="StatsDkernelSegfault"
            )
          }
        }
      }
    state: '{{ "present"
               if ("forward" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'

  - filename: '61-from_internal.remote'
    options: |
      ruleset(
        name="from_internal"
        queue.type="LinkedList"
      ) {
        action(type="omstdout" name="internal_stdout")
      }
    state: '{{ "present"
               if ("from_internal" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'

  # SOURCE: https://www.rsyslog.com/doc/v8-stable/configuration/modules/imjournal.html
  - filename: '70-CEETemplate.remote'
    options: |
      action(type="mmjsonparse")
      action(type="omfile" file="/var/log/ceelog" template="CEETemplate")
    state: '{{ "present"
               if ("ceet" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'

  # SOURCE: https://www.rsyslog.com/doc/rainerscript_call.html
  # NOTE: call rulesetname
  # NOTE: Where "rulesetname" is the name of a ruleset that is defined elsewhere inside the configration. If the call is synchronous or asynchronous depends on the ruleset parameters. This cannot be overriden by the "call" statement.
  - filename: '62-jsonize.remote'
    options: |
      ruleset(
        name="jsonize"
        queue.type="LinkedList"
      ) {
        set $!MESSAGE = $msg;
        set $!hostname = $hostname;
        set $!inputname = $inputname;
        set $!pri = $pri;
        set $!programname = $programname;
        set $!rawmsg = $rawmsg;
        set $!syslogfacility = $syslogfacility;
        set $!syslogseverity = $syslogseverity;
        set $!syslogtag = $syslogtag;
        set $!timegenerated = exec_template("timestampRFC3339");

        call forward
      }
    state: '{{ "present"
               if ("jsonize" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'

    # NOTE: mpstats: Generate Periodic Statistics of Internal Counters
    # SOURCE: https://www.rsyslog.com/doc/v8-stable/configuration/modules/impstats.html
  - filename: '63-from_pstats.remote'
    options: |
      ruleset(
        name="from_pstats"
        queue.type="LinkedList"
      ) {
        action(type="mmjsonparse" cookie="" name="parse_json_from_pstats")

        if ($!origin == "core.queue") then {
          action(type="omfwd"
                name="fwd_queue_stats"
                target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
                protocol="udp"
                port="8125"
                template="StatsDQueue"
          )
        } else if ($!origin == "imjournal" and $!submitted != "") then {
          action(type="omfwd"
                name="fwd_imjournal_stats"
                target="{{boss__rsyslogd__rsyslog_statsd_ip}}"
                protocol="udp"
                port="8125"
                template="StatsDImJournal"
          )
        }

        action(type="omfile"
              name="pstats_dyn_file"
              file="/tmp/pstats.log"
              dirCreateMode="0755"
              FileCreateMode="0644"
              template="RSYSLOG_DebugFormat"
        )
      }

      if ($inputname == "rsyslogd") then {
        call from_internal
      }

      call forward
    state: '{{ "present"
               if ("stats" in boss__rsyslogd__rsyslog_capabilities)
               else "absent" }}'
#
boss__rsyslogd__rsyslog_conf_stop_remote:
  - filename: 'zz-stop.remote'
    comment: |-
      This is a workaround to support empty "remote" ruleset on
      older versions of rsyslog package.
      http://comments.gmane.org/gmane.comp.sysutils.rsyslog/15616
    options: |-
      stop
#
boss__rsyslogd__rsyslog_conf_system_cron:
  filename: '40-cron.system'
  options: |
    if ($msg contains "pam_unix(cron:session): session opened for user") then {
      action(type="omfile" file="/var/log/cron.log")
    {% if 'remote-files' in boss__rsyslogd__rsyslog_capabilities %}
      action(type="omfile" DynaFile="RemoteHostCronLog")
      action(type="omfile" DynaFile="RemoteServiceCronLog")
    {% endif %}
      stop
    } else if ($msg contains "pam_unix(cron:session): session closed for user") then {
      action(type="omfile" file="/var/log/cron.log")
    {% if 'remote-files' in boss__rsyslogd__rsyslog_capabilities %}
      action(type="omfile" DynaFile="RemoteHostCronLog")
      action(type="omfile" DynaFile="RemoteServiceCronLog")
    {% endif %}
      stop
    }
#
boss__rsyslogd__rsyslog_rotation_period_system: 'weekly'
#
boss__rsyslogd__rsyslog_rotation_count_system: '8'
#
boss__rsyslogd__rsyslog_rotation_period_remote: 'monthly'
#
boss__rsyslogd__rsyslog_rotation_count_remote: '12'
#
boss__rsyslogd__rsyslog_etc_services__dependent_list:
  - name: 'syslog-tls'
    port: '{{ boss__rsyslogd__rsyslog_tcp_tls_port }}'
    protocol: [ 'tcp' ]
    comment: 'Syslog over TLS [RFC5425]'
    state: '{{ "present"
               if (ansible_distribution_release in ["wheezy"])
               else "absent" }}'
#
boss__rsyslogd__rsyslog_apt_preferences__dependent_list:
  - package: 'rsyslog rsyslog-* libestr0'
    backports: [ 'wheezy' ]
    reason: 'Version parity with Debian Jessie'
    role: 'debops.rsyslog'
#
boss__rsyslogd__rsyslog_ferm__dependent_rules:
  - type: 'accept'
    dport: [ '514' ]
    protocols: [ 'udp', 'tcp' ]
    saddr: '{{ boss__rsyslogd__rsyslog_allow + boss__rsyslogd__rsyslog_group_allow + boss__rsyslogd__rsyslog_host_allow }}'
    role: 'rsyslog'
    accept_any: False
    rule_state: '{{ "present"
                    if ("network" in boss__rsyslogd__rsyslog_capabilities and not boss__rsyslogd__rsyslog_send_over_tls_only)
                    else "absent" }}'
  - type: 'accept'
    dport: [ 'syslog-tls' ]
    saddr: '{{ boss__rsyslogd__rsyslog_allow + boss__rsyslogd__rsyslog_group_allow + boss__rsyslogd__rsyslog_host_allow }}'
    role: 'rsyslog'
    accept_any: False
    rule_state: '{{ "present"
                    if ("network" in boss__rsyslogd__rsyslog_capabilities and
                        "tls" in boss__rsyslogd__rsyslog_capabilities)
                    else "absent" }}'
#
boss__rsyslogd__rsyslog_logrotate__dependent_config:
  - filename: '000rsyslog-unprivileged'
    comment: 'The rsyslog daemon is run unprivileged'
    options: |
      su root {{ boss__rsyslogd__rsyslog_group }}
    state: '{{ "present" if boss__rsyslogd__rsyslog_unprivileged|bool
                         else "absent" }}'
  - filename: 'rsyslog'
    divert: True
    sections:
      - logs: '/var/log/syslog'
        options: |
          rotate {{ boss__rsyslogd__rsyslog_rotation_count_system }}
          {{ boss__rsyslogd__rsyslog_rotation_period_system }}
          missingok
          notifempty
          delaycompress
          compress
        postrotate: |
          invoke-rc.d rsyslog rotate > /dev/null
      - logs: '{{ boss__rsyslogd__rsyslog_default_logfiles | difference(["/var/log/syslog"]) }}'
        options: |
          rotate {{ boss__rsyslogd__rsyslog_rotation_count_system }}
          {{ boss__rsyslogd__rsyslog_rotation_period_system }}
          missingok
          notifempty
          compress
          delaycompress
          sharedscripts
        postrotate: |
          invoke-rc.d rsyslog rotate > /dev/null
  - filename: 'rsyslog-remote'
    logs: [ '/var/log/remote/*/*/syslog', '/var/log/remote/*/*/*.log' ]
    options: |
      rotate {{ boss__rsyslogd__rsyslog_rotation_count_remote }}
      {{ boss__rsyslogd__rsyslog_rotation_period_remote }}
      missingok
      notifempty
      compress
      delaycompress
      sharedscripts
    postrotate: |
      invoke-rc.d rsyslog rotate > /dev/null


# Dec 30 16:19:18 rsyslogd-master-01 systemd[1]: Stopping System Logging Service...
# Dec 30 16:19:18 rsyslogd-master-01 systemd[1]: Stopped System Logging Service.
# Dec 30 16:19:18 rsyslogd-master-01 systemd[1]: Starting System Logging Service...
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd: [origin software="rsyslogd" swVersion="8.16.0" x-pid="27990" x-info="http://www.rsyslog.com"] start
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2221: module 'imjournal' already in this config, cannot be added  [v8.16.0 try http://www.rsyslog.com/e/2221 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2209: input module name 'imudp' is unknown [v8.16.0 try http://www.rsyslog.com/e/2209 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2207: error during parsing file /etc/rsyslog.d/90-network-input.conf, on or before line 10: parameter 'ruleset' not known -- typo in config file? [v8.16.0 try http://www.rsyslog.com/e/2207 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2207: error during parsing file /etc/rsyslog.d/90-network-input.conf, on or before line 10: parameter 'port' not known -- typo in config file? [v8.16.0 try http://www.rsyslog.com/e/2207 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2209: input module name 'imptcp' is unknown [v8.16.0 try http://www.rsyslog.com/e/2209 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2207: error during parsing file /etc/rsyslog.d/90-network-input.conf, on or before line 19: parameter 'ruleset' not known -- typo in config file? [v8.16.0 try http://www.rsyslog.com/e/2207 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2207: error during parsing file /etc/rsyslog.d/90-network-input.conf, on or before line 19: parameter 'port' not known -- typo in config file? [v8.16.0 try http://www.rsyslog.com/e/2207 ]
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd: rsyslogd's groupid changed to 108
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd: rsyslogd's userid changed to 104
# Dec 30 16:19:18 rsyslogd-master-01 rsyslogd-2027: imjournal: fscanf on state file `/var/spool/rsyslog/' failed  [v8.16.0 try http://www.rsyslog.com/e/2027 ]
