# Ansible managed | /Users/malcolm/dev/bossjones/bossjones-playbook-suite/bosslab-playbooks/extra_playbooks/roles/kubernetes-apps/rsyslog-centralized/templates/4rsyslog-centralized-configmap-0-3-0.yaml.j2
apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-centralized-config-0-3-0
  namespace: kube-system
  labels:
    k8s-app: rsyslog-centralized
data:
  rsyslog.conf: |-
    # Quick overview of message flow and objects
    # msg sent -> input module -> ruleset(conditionally applied) -> rule match -> action (eg. write it to a file, database or forward it to remote host )

    # ORDER OF OPS: https://github.com/lilgreenwein/rsyslog-examples/blob/a546ad2c62b478bf57b004b5b9c522251686e6cf/rsyslog.conf
    # $IncludeConfig /etc/rsyslog/rsyslog.d/globals/*.conf
    # $IncludeConfig /etc/rsyslog/rsyslog.d/modules/*.conf
    # $IncludeConfig /etc/rsyslog/rsyslog.d/templates/*.conf
    # $IncludeConfig /etc/rsyslog/rsyslog.d/inputs/*.conf
    # $IncludeConfig /etc/rsyslog/rsyslog.d/rules/*.conf
    # $IncludeConfig /etc/rsyslog/rsyslog.d/*.conf

    ###########################
    #### GLOBAL DIRECTIVES ####
    ###########################
    # SOURCE: https://github.com/rsyslog/rsyslog-docker/blob/master/appliance/alpine/rsyslog.conf
    # SOURCE: https://github.com/rsyslog/rsyslog-pkg-alpine/blob/master/daily/rsyslog/rsyslog.conf

    #
    # Use traditional timestamp format.
    # To enable high precision timestamps, comment out the following line.
    #
    $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
    # Set default permissions for all log files
    $FileOwner root
    $FileGroup adm
    $FileCreateMode 0640
    $DirCreateMode 0755
    $Umask 0022

    # Reduce repeating messages (default off)
    $RepeatedMsgReduction on

    $CreateDirs on

    # global(processInternalMessages="on")
    # SOURCE: https://itnext.io/metrics-from-kubernetes-logs-82cb1dcb3551
    global(parser.permitSlashInProgramName="on")
    # default location for work (spool) files
    # Raise limits within /etc/systemd/journald.conf on the host(s) - ie., RateLimitIntervalSec=30s + RateLimitBurst=1000000
    # global(workDirectory="/var/spool/rsyslog")

    #
    # where to place spool files
    #
    # global(workDirectory=`echo $_RSYSLOG_SPOOL_PATH`)
    global(
      workDirectory="/spool"
      preserveFQDN                        = "on"
      action.reportSuspension             = "on"
      action.reportSuspensionContinuation = "on"
      senders.keepTrack                   = "on"
      senders.timeoutAfter                = "86400"
      senders.reportGoneAway              = "on"
      senders.reportNew                   = "on"
    )

    # Options for rsyslogd
    # -x disables DNS lookups for remote messages
    # See rsyslogd(8) for more details

    # LogFuncFlow - print out the logical flow of functions (entering and exiting them)

    # FileTrace - specifies which files to trace LogFuncFlow. If not set (the default), a LogFuncFlow trace is provided for all files. Set to limit it to the files specified. FileTrace may be specified multiple times, one file each (e.g. export RSYSLOG_DEBUG="LogFuncFlow FileTrace=vm.c FileTrace=expr.c"

    # PrintFuncDB - print the content of the debug function database whenever debug information is printed (e.g. abort case)!

    # PrintAllDebugInfoOnExit - print all debug information immediately before rsyslogd exits (currently not implemented!)

    # PrintMutexAction - print mutex action as it happens. Useful for finding deadlocks and such.

    # NoLogTimeStamp - do not prefix log lines with a timestamp (default is to do that).

    # NoStdOut - do not emit debug messages to stdout. If RSYSLOG_DEBUGLOG is not set, this means no messages will be displayed at all.

    # Debug - if present, turns on the debug system and enables debug output

    # DebugOnDemand - if present, turns on the debug system but does not enable debug output itself. You need to send SIGUSR1 to turn it on when desired.

    # OutputTidToStderr - if present, makes rsyslog output information about the thread id (tid) of newly created processes to stderr. Note that not necessarily all new threads are reported (depends on the code, e.g. of plugins). This is only available under Linux. This usually does NOT work when privileges have been dropped (that's not a bug, but the way it is). help - display a very short list of commands - hopefully a life saver if you can't access the documentationâ€¦
    # $DebugFile /tmp/rsyslogd.debug.log
    # $DebugLevel 2

    # FIXME: Enable this 4/10/2019
    # INFO: https://www.aplura.com/wp-content/uploads/2017/08/syslog_cheatsheet.pdf
    # ***********************************************************************
    # Setup Performance tuning
    # ***********************************************************************
    main_queue(
      queue.size="1000000" # Size of Queue
      queue.debatchsize="1000" # process messages in batches
      queue.workerthreads="2" # 2 threads for the queue
    )
    # bash-4.4# rsyslogd -v
    # rsyslogd 8.36.0, compiled with:
    #   PLATFORM:				x86_64-alpine-linux-musl
    #   PLATFORM (lsb_release -d):
    #   FEATURE_REGEXP:				Yes
    #   GSSAPI Kerberos 5 support:		No
    #   FEATURE_DEBUG (debug build, slow code):	No
    #   32bit Atomic operations supported:	Yes
    #   64bit Atomic operations supported:	Yes
    #   memory allocator:			system default
    #   Runtime Instrumentation (slow code):	No
    #   uuid support:				Yes
    #   systemd support:			No
    #   Number of Bits in RainerScript integers: 64

    # INFO: https://www.aplura.com/wp-content/uploads/2017/08/syslog_cheatsheet.pdf
    # ***********************************************************************
    #################
    #### MODULES ####
    #################
    # ***********************************************************************
    # module(load="imjournal" ignorepreviousmessages="on" ratelimit.interval="60" ratelimit.burst="2000000" persiststateinterval="10000" statefile="/var/spool/rsyslog/imjournal.state")
    #module(load="imtcp" StreamDriver.AuthMode="anon" StreamDriver.Mode="1")
    # config.enabled=`echo $ENABLE_STATISTICS`)
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    # If you do not load inputs, nothing happens!
    # You may need to set the module load path if modules are not found.
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    module(load="impstats")
    module(load="imrelp")
    module(load="imptcp" MaxSessions="5000")
    # module(load="imptcp")
    module(load="imudp" TimeRequery="500")
    module(load="omstdout")
    # module(load="builtin:omfile")
    # Default parameters for file output. Old-style global settings are not working with new-style actions
    module(load="builtin:omfile" FileOwner="root" FileGroup="adm" dirOwner="root" dirGroup="adm" FileCreateMode="0640" DirCreateMode="0755")
    module(load="omelasticsearch")
    module(load="mmjsonparse")
    module(load="mmutf8fix")
    # module(load="imuxsock")
    # module(load="imklog")
    # module(load="imfile" PollingInterval="10")
    # module(
    #     load = "mmfields"
    # )


    ###########################
    #### TEMPLATES         ####
    ###########################
    # Templates(SOURCE: https://linux-help.org/wiki/logging/rsyslog/advanced-rsyslog)
    # template(name="RemoteHost" type="string" string="/srv/log/%HOSTNAME%/%$YEAR%/%$MONTH%/syslog-%$DAY%.log")

    # DISABLED: # $IncludeConfig /rsyslog-centralized/etc/rsyslog.conf.d/*.template

    # includes done explicitely
    # include(file="/rsyslog-centralized/etc/rsyslog.conf.d/log_to_logsene.conf" config.enabled=`echo $ENABLE_LOGSENE`)
    # DISABLED: # include(file="/rsyslog-centralized/etc/rsyslog.conf.d/log_to_files.conf" config.enabled=`echo $ENABLE_LOGFILES`)
    # include(file="/rsyslog-centralized/etc/rsyslog.conf.d/log_to_stdout.conf" config.enabled=`echo $ENABLE_STDOUT`)


    # DISABLED: # $template RemoteHost, "/srv/log/%HOSTNAME%/%$YEAR%/%$MONTH%/syslog-%$DAY%.log"
    # DISABLED: # $template TmplMsg, "/log/client_logs/%HOSTNAME%/%PROGRAMNAME%.log"

    #########################################################################
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    # SOURCE: https://github.com/lilgreenwein/rsyslog-examples/blob/a546ad2c62b478bf57b004b5b9c522251686e6cf/rsyslog.d/templates/01_local.conf
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    #########################################################################
    template(
        name   = "LOCAL_MessagesFileTemplate"
        type   = "string"
        string = "/var/log/messages"
    )
    template(
        name   = "LOCAL_SecureFileTemplate"
        type   = "string"
        string = "/var/log/secure"
    )
    template(
        name   = "LOCAL_MailFileTemplate"
        type   = "string"
        string = "/var/log/maillog"
    )
    template(
        name   = "LOCAL_CronFileTemplate"
        type   = "string"
        string = "/var/log/cron"
    )
    template(
        name   = "LOCAL_SpoolerFileTemplate"
        type   = "string"
        string = "/var/log/spooler"
    )
    template(
        name   = "LOCAL_BootFileTemplate"
        type   = "string"
        string = "/var/log/boot.log"
    )
    template(
        name   = "LOCAL_SyslogFileTemplate"
        type   = "string"
        string = "/var/log/rsyslogd.log"
    )
    template(
        name   = "LOCAL_UncategorizedFileTemplate"
        type   = "string"
        string = "/var/log/uncategorized"
    )
    template(
        name   = "LOCAL_FacilitySeverityFileTemplate"
        type   = "list"
    ) {
        constant(value = "/var/log/")
        property(name = "syslogfacility-text")
        constant(value = ".")
        property(name = "syslogseverity-text")
        constant(value = ".log")
    }

    #########################################################################
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    # SOURCE: https://github.com/lilgreenwein/rsyslog-examples/blob/a546ad2c62b478bf57b004b5b9c522251686e6cf/rsyslog.d/templates/02_remote.conf
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    #########################################################################
    template(
        name = "REMOTE_MessagesFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/messages")
    }
    template(
        name = "REMOTE_SecureFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/secure")
    }
    template(
        name = "REMOTE_MailFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/maillog")
    }
    template(
        name = "REMOTE_CronFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/cron")
    }
    template(
        name = "REMOTE_SpoolerFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/spooler")
    }
    template(
        name = "REMOTE_BootFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/boot.log")
    }
    template(
        name = "REMOTE_SyslogFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/rsyslogd.log")
    }
    template(
        name = "REMOTE_UncategorizedFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/uncategorized")
    }
    template(
        name = "REMOTE_FacilitySeverityFileTemplate"
        type = "list"
    ) {
        constant(value = "/log/client_logs/")
        property(name  = "fromhost")
        constant(value = "/")
        property(name  = "syslogfacility-text")
        constant(value = ".")
        property(name  = "syslogseverity-text")
        constant(value = ".log")
    }

    ###########################
    #### INPUTS            ####
    ###########################
    # INFO: https://www.aplura.com/wp-content/uploads/2017/08/syslog_cheatsheet.pdf
    # ***********************************************************************
    # Setup listeners
    # ***********************************************************************
    # $UDPServerAddress 0.0.0.0
    # $UDPServerRun 6160
    input(type="imudp"
      Address="0.0.0.0"
      RateLimit.Interval="0"
      port=`echo $_IMUDP_PORT`)

    input(type="imptcp"
      Address="0.0.0.0"
      port=`echo $_IMTCP_PORT`
    )
    # ruleset="remote"
    # input(type="imptcp"
    #   port=`echo $_IMTCP_PORT`)

    input(type="imrelp"
      Address="0.0.0.0"
      port=`echo $_IMRELP_PORT`)
    # input(type="imrelp"
    # port=`echo $_IMRELP_PORT`)

    # SOURCE: https://github.com/PLOS-Formulas/ubiquiti-formula/blob/71305bcb06117953cd7b8ba6babbdd051aa44fea/ubiquiti/conf/etc/rsyslog.d/ubiquiti.conf
    # input(type="imfile"
    #   File="/log/unifi/server.log"
    #   Tag="unificontroller"
    #   StateFile="unifi_server_log"
    #   Facility="local0"
    #   Severity="info")

    # $MaxMessageSize 64k
    # $ActionQueueFileName fwdRule1     # unique name prefix for spool files
    # $ActionQueueMaxDiskSpace 1g       # 1gb space limit (use as much as possible)
    # $ActionQueueSaveOnShutdown on     # save messages to disk on shutdown
    # $ActionQueueType LinkedList       # run asynchronously
    # $ActionResumeRetryCount -1        # infinite retries if host is down

    # SOURCE: https://github.com/dcv-cloud/dcv-kubernetes/blob/50221c0fb3ee7b2f799930b336662ab1d896f871/kubeManifests/infra-repo-197/datafeed/addConfigMapDatafeed.yaml
    # *********************************************************
    #### GLOBAL DIRECTIVES ####
    # Where to place auxiliary files
    # $WorkDirectory /var/lib/rsyslog
    # Use default timestamp format
    # $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
    # Include all config files in /etc/rsyslog.d/
    # $IncludeConfig /etc/rsyslog.d/*.conf
    # Turn off message reception via local log socket;
    # local messages are retrieved through imjournal now.
    # $OmitLocalLogging on
    # File to store the position in the journal
    # $IMJournalStateFile imjournal.state
    # *********************************************************

    # $InputFilePollInterval 10
    # template(
    #   name="RemoteHostUnifiServer"
    #   type="string"
    #   string="/log/unifiserver.log"
    # )

    # $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

    # *********************************************************************************************************
    # SOURCE: https://github.com/rsyslog/rsyslog/issues/2040
    # *********************************************************************************************************
    # cat /etc/rsyslog.d/udp-nonlocaladdr-bug.conf
    # module(load="imudp")

    # input(type="imudp" address="127.0.0.1" port="514" RateLimit.Interval="0" ruleset="logtest")

    # input(type="imudp" address="192.168.99.99" port="514" RateLimit.Interval="0" ruleset="logtest")

    # ruleset(name="logtest") {
    #     action(type="omfile" file="/tmp/logtest")
    # }
    # *********************************************************************************************************

    # FIXME: Enable this 4/10/2019
    # INFO: https://www.aplura.com/wp-content/uploads/2017/08/syslog_cheatsheet.pdf
    # ***********************************************************************
    # Setup filters
    # ***********************************************************************
    # SOURCE: https://itnext.io/metrics-from-kubernetes-logs-82cb1dcb3551
    # ***************************************************************************************
    # set $!custom_hostname = exec_template("hostname");
    # # When empty it's because message does not come from journald but directly from rsyslogd
    # if $!custom_hostname == "" then {
    #   set $!custom_hostname = "FROM-RSYSLOGD";
    # }
    # ***************************************************************************************

    # ***************************************************************************************
    # SOURCE: https://github.com/instantlinux/docker-tools/blob/f4ce5659047cbf258908f8a090efa1a49688c337/images/rsyslogd/kubernetes.yaml
    # SOURCE: https://www.rsyslog.com/doc/v8-stable/configuration/filters.html
    # ***************************************************************************************
    # :msg, regex, "Connection closed by 192.168.1.[0-9]\\{1,3\\} \\[preauth\\]" stop
    # :msg, contains, "Error: Request packet type/version was invalid" stop
    # :msg, contains, "Client request was invalid, bailing out..." stop
    # :msg, contains, "required revision has been compacted" stop
    # ***************************************************************************************

    # # FIXME: Enable this 4/10/2019
    # # INFO: https://www.aplura.com/wp-content/uploads/2017/08/syslog_cheatsheet.pdf
    # # ***********************************************************************
    # # Setup templates
    # # ***********************************************************************
    # template(name="d_catch_all" type="string" string="/var/log/remote_syslog/catch_all/%FROMHOST%/%$YEAR%-%$MONTH%-%$DAY%.log")
    # template(name="d_firewall_log" type="string" string="/var/log/remote_syslog/firewall/%FROMHOST%/%$YEAR%-%$MONTH%-%$DAY%.log")
    # SOURCE: https://github.com/dcv-cloud/dcv-kubernetes/blob/50221c0fb3ee7b2f799930b336662ab1d896f871/kubeManifests/infra-repo-197/datafeed/addConfigMapDatafeed.yaml
    # template(name="dcloud-metrics" type="list"){
    #   constant(value="{\"msg\":")
    #   property(name="msg")
    #   constant(value=",")
    #   constant(value="\"timereported\":\"")
    #   property(name="timereported" dateFormat="rfc3339" caseConversion="lower")
    #   constant(value="\",")
    #   constant(value="\"hostname\":\"")
    #   property(name="hostname")
    #   constant(value="\",")
    #   constant(value="\"fromhost\":\"")
    #   property(name="fromhost")
    #   constant(value="\",")
    #   constant(value="\"fromhost-ip\":\"")
    #   property(name="fromhost-ip")
    #   constant(value="\",")
    #   constant(value="\"pri\":\"")
    #   property(name="pri")
    #   constant(value="\",")
    #   constant(value="\"syslogseverity\":\"")
    #   property(name="syslogseverity")
    #   constant(value="\",")
    #   constant(value="\"timegenerated\":\"")
    #   property(name="timegenerated")
    #   constant(value="\",")
    #   constant(value="\"programname\":\"")
    #   property(name="programname")
    #   constant(value="\",")
    #   constant(value="\"app-name\":\"")
    #   property(name="app-name")
    #   constant(value="\"}")
    #   constant(value="\n")
    # }

    # # FIXME: Enable this 4/10/2019
    # # INFO: https://www.aplura.com/wp-content/uploads/2017/08/syslog_cheatsheet.pdf
    # # ***********************************************************************
    # # Setup output
    # # ***********************************************************************
    # ruleset(name="f_remote_all" queue.type="LinkedList" queue.size="100000") {
    # if ($fromhost-ip startswith '192.168.100.') then {
    #  action(type="omfile" DynaFile="d_firewall_log")
    #  stop
    # }
    #   # Lets setup the catch all logging
    #   action(type="omfile" DynaFile="d_catch_all")
    # }
    # ruleset(name="f_remote_all") {
    #  action(type="omfile" DynaFile="d_catch_all")
    # }
    # ruleset(name="f_firewall") {
    #  action(type="omfile" DynaFile="d_firewall_log")
    # }

    #################### default ruleset begins ####################
    ###########################
    #### RULES            ####
    ###########################

    #########################################################################
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    # SOURCE: https://github.com/lilgreenwein/rsyslog-examples/blob/a546ad2c62b478bf57b004b5b9c522251686e6cf/rsyslog.d/rules/99_fallback.conf
    # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    #########################################################################
    if not $fromhost-ip or $fromhost-ip startswith "127." then {
        if prifilt("*.info;mail.none;authpriv.none;cron.none") then {
            # action(
            #     name     = "LOCAL_MessagesToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_MessagesFileTemplate"
            #     sync     = "on"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )
            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("syslog.*") then {
            # action(
            #     name     = "LOCAL_SyslogToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_SyslogFileTemplate"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("authpriv.*") then {
            # action(
            #     name     = "LOCAL_SecureToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_SecureFileTemplate"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("mail.*") then {
            # action(
            #     name     = "LOCAL_MailToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_MailFileTemplate"
            #     sync     = "on"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("cron.*") then {
            # action(
            #     name     = "LOCAL_CronToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_CronFileTemplate"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("uucp,news.crit") then {
            # action(
            #     name     = "LOCAL_SpoolToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_SpoolerFileTemplate"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("local7.*") then {
            # action(
            #     name     = "LOCAL_BootToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_BootFileTemplate"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("*.emerg") then {
            # action(
            #     name     = "LOCAL_EmergToFile"
            #     type     = "omusrmsg"
            #     users    = "*"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )

            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
        if prifilt("*.*") then {
            # action(
            #     name     = "LOCAL_UncategorizedToFile"
            #     type     = "omfile"
            #     dynaFile = "LOCAL_UncategorizedFileTemplate"
            #     template = "RSYSLOG_TraditionalFileFormat"
            # )
            action(type="omstdout"
                   template="RSYSLOG_TraditionalFileFormat")
            stop
        }
    } else {
        if prifilt("*.info;mail.none;authpriv.none;cron.none") then {
            action(
                name     = "REMOTE_MessagesToFile"
                type     = "omfile"
                dynaFile = "REMOTE_MessagesFileTemplate"
                sync     = "on"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("syslog.*") then {
            action(
                name     = "LOCAL_SyslogToFile"
                type     = "omfile"
                dynaFile = "REMOTE_SyslogFileTemplate"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("authpriv.*") then {
            action(
                name     = "REMOTE_SecureToFile"
                type     = "omfile"
                dynaFile = "REMOTE_SecureFileTemplate"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("mail.*") then {
            action(
                name     = "REMOTE_MailToFile"
                type     = "omfile"
                dynaFile = "REMOTE_MailFileTemplate"
                sync     = "on"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("cron.*") then {
            action(
                name     = "REMOTE_CronToFile"
                type     = "omfile"
                dynaFile = "REMOTE_CronFileTemplate"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("uucp,news.crit") then {
            action(
                name     = "REMOTE_SpoolToFile"
                type     = "omfile"
                dynaFile = "REMOTE_SpoolerFileTemplate"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("local7.*") then {
            action(
                name     = "REMOTE_BootToFile"
                type     = "omfile"
                dynaFile = "REMOTE_BootFileTemplate"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
        if prifilt("*.*") then {
            action(
                name     = "REMOTE_UncategorizedToFile"
                type     = "omfile"
                dynaFile = "REMOTE_UncategorizedFileTemplate"
                template = "RSYSLOG_TraditionalFileFormat"
            )
            stop
        }
    }

    # DISABLED: 4/15/2019    ruleset(name="catchall") {
    # DISABLED: 4/15/2019      *.* :omstdout:
    # DISABLED: 4/15/2019    }
    # DISABLED: 4/15/2019
    # DISABLED: 4/15/2019    $DefaultRuleset catchall
    # DISABLED: 4/15/2019
    # DISABLED: 4/15/2019    ruleset(name="remote") {
    # DISABLED: 4/15/2019        $IncludeConfig /etc/rsyslog.d/*.remote
    # DISABLED: 4/15/2019
    # DISABLED: 4/15/2019        action(type="omfile" DynaFile="RemoteHost")
    # DISABLED: 4/15/2019    }

    # input(type="imudp" port=`echo $_IMUDP_PORT` ruleset="remote")
    # input(type="imtcp" port=`echo $_IMTCP_PORT` ruleset="remote")


    # we emit our own messages to docker console:
    # syslog.* :omstdout:
    # *.* :omstdout:
    # action(type="omstdout")

    include(file="/config/droprules.conf" mode="optional")  # this permits the user to easily drop unwanted messages

    action(name="main_utf8fix" type="mmutf8fix" replacementChar="?")

    # include(text=`echo $CNF_CALL_LOG_TO_LOGFILES`)
    # include(text=`echo $CNF_CALL_LOG_TO_LOGSENE`)
    # include(text=`echo $CNF_CALL_LOG_TO_STDOUT`)
    # include(text=`echo $_IMTCP_PORT`)
    # include(text=`echo $_IMUDP_PORT`)
    # include(text=`echo $_IMRELP_PORT`)

    # SOURCE: https://itnext.io/metrics-from-kubernetes-logs-82cb1dcb3551
    # ***************************************************************************************
    # Compose RFC5424 message
    # template(name="rfc5424" type="list") {
    #   constant(value="<")
    #   property(name="PRI")
    #   constant(value=">1 ")
    #   property(name="TIMESTAMP" dateFormat="rfc3339" date.inUTC="on")
    #   constant(value=" ")
    #   property(name="!custom_hostname" position.from="1" position.to="255" caseConversion="lower")
    #   constant(value=" ")
    #   property(name="!custom_appname" position.from="1" position.to="48" caseConversion="lower")
    #   constant(value=" ")
    #   property(name="PROCID" position.from="1" position.to="128")
    #   constant(value=" ")
    #   property(name="MSGID" position.from="1" position.to="32")
    #   constant(value=" ")
    #   property(name="!custom_sddata")
    #   constant(value=" ")
    #   property(name="msg" droplastlf="on")
    #   constant(value="\n")
    # }
    # action(type="mmutf8fix")
    # action(type="omfwd"
    #   target="127.0.0.1"
    #   port="6514"
    #   protocol="tcp"
    #   tcp_framing="octet-counted"
    #   template="rfc5424"
    #   queue.type="LinkedList"
    #   queue.size="5000000"
    #   queue.filename="forwarding"
    #   queue.maxdiskspace="1g")
    # ***************************************************************************************
    # SOURCE: https://selivan.github.io/2017/02/07/rsyslog-log-forward-save-filename-handle-multi-line-failover.html
    # Write all messages of auth and authpriv facilities into file /var/log/auth.log and continue processing this messages
    # modern
    # SOURCE: https://bsamuels.net/2014/08/30/redirecting-rsyslog-output.html
    # if ( $fromhost == "UniFiSecurityGateway3P" ) then {
    #     action(type="omfile" file="/log/unifi.log")
    #     action(type="omfile" file="/log/unifi.log")
    #     stop
    # }

    # if ($msg contains "UniFiSecurityGateway3P") then {
    #   action(type="omfile" file="/log/unifi.log")
    #   # action(type="omfile" DynaFile="RemoteHostCronLog")
    #   # action(type="omfile" DynaFile="RemoteServiceCronLog")
    #   stop
    # }

    # *.* action(type="omfile" File="/log/rsyslog_messages.log" template="dcloud-metrics")
    #


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-centralized-config-dot-d-0-3-0
  namespace: kube-system
  labels:
    k8s-app: rsyslog-centralized
data:
  unifi.template: |-
    template(name="unifi_dynafile" type="string" string="/var/log/%hostname%/unifi.log")

  10-unifi_remote.remote: |-
    # if $hostname == 'UniFiSecurityGateway3P' then {
    # action(type="omfile" DynaFile="unifi_dynafile" template="RSYSLOG_DebugFormat")
    # stop
    # }
    # SOURCE: https://github.com/evertrue/logserver-cookbook/wiki/Supplemental-rsyslog-documentation
    # Handy debugging tips
    $template myDebug, "hostname: <%hostname%> fromhost: <%fromhost%> fromhost-ip: <%fromhost-ip%> syslogtag: <%syslogtag%> pri: <%pri%> pri-text: <%pri-text%> iut: <%iut%> syslogfacility: <%syslogfacility%> syslogfacility-text: <%syslogfacility-text%> syslogseverity: <%syslogseverity%> syslogseverity-text: <%syslogseverity-text%> timegenerated: <%timegenerated%> timereported: <%timereported%> timestamp: <%timestamp%> protocol-version: <%protocol-version%> structured-data: <%structured-data%> app-name: <%app-name%> procid: <%procid%> msgid: <%msgid%> inputname: <%inputname%> rawmsg: <%rawmsg%>\n"

    action(type="omfile" file="/log/rsyslog-debug" template="myDebug")

  debug_logging.conf: |-
    $DebugFile /tmp/rsyslogd.debug.log
    $DebugLevel 2

  log_to_files.conf: |-
    # logging to files in /log
    # template(name="log_to_files_dynafile" type="string" string=`echo $LOGFILES_STORE`)
    template(name="log_to_files_dynafile" type="string" string="/var/log/hosts/%hostname:::secpath-replace%/%programname:::secpath-replace%.log")
    # template(name="log_to_files_dynafile" type="string" string="/log/hosts/%hostname:::secpath-replace%/%programname:::secpath-replace%.log")
    ruleset(name="log_to_files") {
      /var/log/debug;RSYSLOG_DebugFormat
      action(type="omfile" dynafile="log_to_files_dynafile" name="log_to_logfiles")
    }


  log_to_logsene.conf: |-
    # config snippet for the Logsene service
    #   https://sematext.com/logsene/

    template(name="logsene_json" type="list") {
        constant(value="{")
        constant(value="\"@timestamp\":\"")      property(name="timereported" dateFormat="rfc3339")
        constant(value="\",\"host\":\"")         property(name="hostname")
        constant(value="\",\"severity\":\"")     property(name="syslogseverity-text" caseConversion="upper")
        constant(value="\",\"facility\":\"")     property(name="syslogfacility-text")
        constant(value="\",\"syslog-tag\":\"")   property(name="syslogtag" format="json")
        constant(value="\",\"source\":\"")       property(name="app-name" format="json")
        constant(value="\",")                    property(name="$!all-json" position.from="2")
    }

    template(name="logsene_plain" type="list") {
        constant(value="{")
        constant(value="\"@timestamp\":\"")      property(name="timereported" dateFormat="rfc3339")
        constant(value="\",\"host\":\"")         property(name="hostname")
        constant(value="\",\"severity\":\"")     property(name="syslogseverity-text" caseConversion="upper")
        constant(value="\",\"facility\":\"")     property(name="syslogfacility-text")
        constant(value="\",\"syslog-tag\":\"")   property(name="syslogtag" format="json")
        constant(value="\",\"source\":\"")       property(name="app-name" format="json")
        constant(value="\",\"message\":\"")      property(name="msg" format="json")
        constant(value="\"}")
    }


    ruleset(name="log_to_logsene"
      queue.type="LinkedList" queue.dequeueBatchSize="2000"
      queue.size="100000"  # do not use a too-high values, else we get trouble with 10s shutdown period!
      queue.spoolDirectory="/work"
      queue.filename="q_log_to_logsene" queue.maxfilesize="100m" queue.maxdiskspace="2g"
      queue.saveonshutdown="on"
      ) {
      action(name="main_cee_parser" type="mmjsonparse")
      if $parsesuccess == "OK" then {
        action( name="logsene_json"
          type="omelasticsearch"
          server=`echo $LOGSENE_URL`
          serverport="443"
          usehttps="on"
          template="logsene_json"
          searchIndex=`echo $LOGSENE_TOKEN`
          searchType="syslog-cee"
          bulkmode="on"
          action.resumeRetryCount="5"
          action.resumeInterval="60"
          )
      } else {
        action(	name="logsene_plain"
          type="omelasticsearch"
          server=`echo $LOGSENE_URL`
          serverport="443"
          usehttps="on"
          template="logsene_plain"
          searchIndex=`echo $LOGSENE_TOKEN`
          searchType="syslog"
          bulkmode="on"
          action.resumeRetryCount="5"
          action.resumeInterval="60"
        )
      }
    }


  log_to_stdout.conf: |-
    *.* :omstdout:

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-centralized-container-config-0-3-0
  namespace: kube-system
  labels:
    k8s-app: rsyslog-centralized
data:
  container_config: |-
    # rsyslog syslog appliance container configuration.
    # This file will be sourced upon container startup.
    # Uncomment those settings that you need and set them to your
    # desired values.

    tree /var/log/
    tree /log
    tree /logs

    # general container app settings:
    export TZ=UTC
    #export CONTAINER_SILENT=on  # do not emit startup message
    export ENABLE_STATISTICS=on

    # Do we write log files?
    # yes, we do (comment out to disable)
    export ENABLE_LOGFILES=on
    # Where do we write to?
    # path for host-specific files is: /log/hosts/HOSTNAME
    # export LOGFILES_STORE="/log/hosts/%hostname:::secpath-replace%/messages.log"
    # you can of course overwrite this. For example, the below definition
    # uses the program name instead of a fixed name "messages.log". That means
    # for each host, a separate file for each program will be generated.
    export LOGFILES_STORE="/log/hosts/%hostname:::secpath-replace%/%programname:::secpath-replace%.log"

    # If you have an account with Logsene, enter your access
    # information below:
    #export LOGSENE_TOKEN=
    #export LOGSENE_URL=logsene-receiver.eu.sematext.com

    # export CNF_CALL_LOG_TO_STDOUT="off"

    # Settings for debugging the container
    #export USE_VALGRIND=on
    # export RSYSLOG_DEBUG="debug nostdout"
    export RSYSLOG_DEBUG="debug DebugOnDemand LogFuncFlow FileTrace=imptcp.c FileTrace=impudp.c FileTrace=rsyslogd.c FileTrace=action.c"
    # export RSYSLOG_DEBUGLOG="/log/rsyslog-internal-debug.log"

    export _IMTCP_PORT=${_IMTCP_PORT}
    export _IMUDP_PORT=${_IMUDP_PORT}
    export _IMRELP_PORT=${_IMRELP_PORT}
    export _RSYSLOG_SPOOL_PATH=${_RSYSLOG_SPOOL_PATH:-/var/spool/rsyslog}

  droprules.conf: |-
    # This file permits to do drop unneded messages
    # Uncomment the samples below to activate them. You can
    # add as many drop rules as you like.

    #if $rawmsg contains "somejunk


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-centralized-logrotate-0-3-0
  namespace: kube-system
  labels:
    k8s-app: rsyslog-centralized
data:
  syslog: |-
    # This file created from k8s configmap
    # the mail log files are used by all syslog daemons
    # the news log files are used by all syslog daemons
    /var/log/warn /var/log/messages /var/log/allmessages /var/log/localmessages
    /var/log/mail /var/log/mail.info /var/log/mail.warn /var/log/mail.err
    /var/log/news/news.crit /var/log/news/news.err /var/log/news/news.notice
    /var/log/cron /var/log/secure
    {
        compress
        dateext
        maxage 365
        rotate 45
        missingok
        notifempty
        size +4096k
        create 640 root root
        sharedscripts
        postrotate
            /usr/bin/killall -HUP rsyslogd
        endscript
    }

    # SOURCE: https://github.com/dcv-cloud/dcv-kubernetes/blob/50221c0fb3ee7b2f799930b336662ab1d896f871/kubeManifests/infra-repo-197/datafeed/addConfigMapDatafeed.yaml
    /log/rsyslog_messages.log
    {
        hourly
        rotate 5
        create
        dateext
        sharedscripts
        postrotate
            /bin/kill -HUP `ps aux | grep rsyslog.conf | cut -d " " -f1` 2> /dev/null || true
        endscript
    }
    /log/metricsFeed.log
    {
        hourly
        rotate 5
        create
        dateext
        sharedscripts
        postrotate
            /bin/kill -HUP `ps aux | grep rsyslog.conf | cut -d " " -f1` 2> /dev/null || true
        endscript
    }
    /log/unifi.log /var/log/unifi.log
    {
        hourly
        rotate 5
        create
        dateext
        sharedscripts
        postrotate
            /bin/kill -HUP `ps aux | grep rsyslog.conf | cut -d " " -f1` 2> /dev/null || true
        endscript
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-centralized-crontab-0-3-0
  namespace: kube-system
  labels:
    k8s-app: rsyslog-centralized
data:
  crontab: |-
    SHELL=/bin/bash
    PATH=/sbin:/bin:/usr/sbin:/usr/bin
    MAILTO=root
    # For details see man 4 crontabs
    # Example of job definition:
    # .---------------- minute (0 - 59)
    # |  .------------- hour (0 - 23)
    # |  |  .---------- day of month (1 - 31)
    # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
    # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
    # |  |  |  |  |
    # *  *  *  *  * user-name  command to be executed
    0 0 * * * root /usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rsyslog-centralized-grok-pattern-0-3-0
  namespace: kube-system
  labels:
    k8s-app: rsyslog-centralized
data:
  pattern.yml: |-
    # SOURCE: https://github.com/effertzdv/elasticstack/blob/92c6332265f1d83dfc282b30d415bcd4f8917846/logstash/pipeline/logstash.conf
    # SOURCE: https://github.com/effertzdv/elasticstack/blob/92c6332265f1d83dfc282b30d415bcd4f8917846/logstash/patterns/pattern.yml
    MAC (?:%{CISCOMAC}|%{WINDOWSMAC}|%{COMMONMAC})
    CISCOMAC (?:(?:[A-Fa-f0-9]{4}\.){2}[A-Fa-f0-9]{4})
    WINDOWSMAC (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2})
    COMMONMAC (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})
    UNIFI_FW [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+
    UNIFI_DEV_TYPE \s?(\("%{WORD:unifi_type},%{WORD:unifi_ap_mac},v%{UNIFI_FW:unifi_firmware}"\))?
    UNIFI_EVENT_TYPE (IEEE 802\.11|WPA|WEP)
    UNIFI_CUSTOM_EVENT (wevent.ubnt_custom_event\(\): %{WORD:CUSTOM_UNFI_EVENT} %{WORD:unifi_interface}: %{MAC:unifi_sta_mac} \/ %{GREEDYDATA:CUSTOM_UNIFI_EVENT_DATA})
