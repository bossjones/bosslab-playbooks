# Ansible managed

#
# | Global options
# | -------------------------------------------------------------------------------------------
# | Network Stream Drivers: https://www.rsyslog.com/doc/netstream.html
# | -------------------------------------------------------------------------------------------
# | Network stream drivers are a layer between various parts of rsyslogd (e.g. the imtcp module)
# | and the transport layer. They provide sequenced delivery, authentication and confidentiality
# | to the upper layers. Drivers implement different capabilities.
# |
# | Users need to know about netstream drivers because they need to configure the proper driver,
# | and proper driver properties, to achieve desired results (e.g. a TLS-protected syslog
# | transmission).
# | -------------------------------------------------------------------------------------------
#
# | -------------------------------------------------------------------------------------------
# | ptcp - the plain tcp network transport (no security): https://www.rsyslog.com/doc/ns_ptcp.html
# | -------------------------------------------------------------------------------------------
# | Network stream drivers are a layer between various parts of rsyslogd (e.g. the imtcp module)
# | and the transport layer. They provide sequenced delivery, authentication and confidentiality
# | to the upper layers. Drivers implement different capabilities.
# |
# | Users need to know about netstream drivers because they need to configure the proper driver,
# | and proper driver properties, to achieve desired results (e.g. a TLS-protected syslog
# | transmission).
# | -------------------------------------------------------------------------------------------
# 
#
global(
  defaultNetstreamDriver="ptcp"
)

# Ansible managed

#
# Set default permissions for all log files
#
$FileOwner syslog
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022
$PrivDropToUser syslog
$PrivDropToGroup syslog


#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Log every message
#
$RepeatedMsgReduction off

# Ansible managed

#
# | Log messages sent to local UNIX socket
# | -------------------------------------------------------------------------------------------
# | imuxsock: Unix Socket Input - rsyslog.readthedocs.io/en/latest/configuration/modules/imuxsock.html?highlight=OmitLocalLogging
# | -------------------------------------------------------------------------------------------
# | $OmitLocalLogging (imuxsock) [on/off] - The inverse of SysSock.Use.
# | $SystemLogSocketName <name-of-socket> equivalent to: SysSock.Name
# | SysSock.Use (imuxsock) [on/off] - Listen on the local log socket. This is most useful if you run multiple instances of rsyslogd where only one shall handle the system log socket.
# | -------------------------------------------------------------------------------------------
# 
#
$ModLoad imuxsock
$OmitLocalLogging off
$SystemLogSocketName /run/systemd/journal/syslog

#
# Log kernel messages
#
$ModLoad imklog
$KLogPermitNonKernelFacility on

#
# Log periodic -- MARK -- messages
#
$ModLoad immark
$MarkMessagePeriod 3600

#
# | Log messages in journald using module imjournal
# | -------------------------------------------------------------------------------------------
# | https://rsyslog.readthedocs.io/en/latest/configuration/modules/imjournal.html
# | SOURCE: https://docs.fedoraproject.org/en-US/Fedora/23/html/System_Administrators_Guide/s1-interaction_of_rsyslog_and_journal.html
# | SOURCE: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/s1-interaction_of_rsyslog_and_journal
# | -------------------------------------------------------------------------------------------
# |
# | -------------------------------------------------------------------------------------------
# 
#
$ModLoad imjournal
$imjournalPersistStateInterval 100
$imjournalStateFile /var/spool/rsyslog/imjournal.state

#
# load mmjsonparse module for structured logs
# 
#
$ModLoad mmjsonparse

#
# $DebugFile /tmp/rsyslogd.debug.log
# 
#
$DebugFile /tmp/rsyslogd.debug.log
$DebugLevel 2

# Ansible managed

# Ansible managed

#
# Forward logs to specified hosts
#
*.*  action(type="omfwd" target="192.168.50.108" port="514" protocol="tcp" action.resumeRetryCount="100" queue.type="linkedList" queue.size="10000")


# Ansible managed

#
# Remote host system logs
#
template(
  name="RemoteHostSyslog"
  type="string"
  string="/var/log/remote/hosts/%HOSTNAME%/syslog"
)

#
# Remote host auth logs
#
template(
  name="RemoteHostAuthLog"
  type="string"
  string="/var/log/remote/hosts/%HOSTNAME%/auth.log"
)

#
# Remote host cron logs
#
template(
  name="RemoteHostCronLog"
  type="string"
  string="/var/log/remote/hosts/%HOSTNAME%/cron.log"
)

#
# Remote service auth logs
#
template(
  name="RemoteServiceAuthLog"
  type="string"
  string="/var/log/remote/services/auth/auth.log"
)

#
# Remote service cron logs
#
template(
  name="RemoteServiceCronLog"
  type="string"
  string="/var/log/remote/services/cron/cron.log"
)

#
# Remote service mail logs
#
template(
  name="RemoteServiceMailLog"
  type="string"
  string="/var/log/remote/services/mail/mail.log"
)

#
# Include custom templates
#
$IncludeConfig /etc/rsyslog.d/*.template

#
# Use traditional timestamp format
#
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# Log cloudinit generated log messages to file
:syslogtag, isequal, "[CLOUDINIT]" /var/log/cloud-init.log

# comment out the following line to allow CLOUDINIT messages through.
# Doing so means you'll also get CLOUDINIT messages in /var/log/syslog
& stop
# Ansible managed

if ($msg contains "pam_unix(cron:session): session opened for user") then {
  action(type="omfile" file="/var/log/cron.log")
  action(type="omfile" DynaFile="RemoteHostCronLog")
  action(type="omfile" DynaFile="RemoteServiceCronLog")
  stop
} else if ($msg contains "pam_unix(cron:session): session closed for user") then {
  action(type="omfile" file="/var/log/cron.log")
  action(type="omfile" DynaFile="RemoteHostCronLog")
  action(type="omfile" DynaFile="RemoteServiceCronLog")
  stop
}


# Ansible managed

if ($msg contains "pam_unix(cron:session): session opened for user") then {
  action(type="omfile" DynaFile="RemoteHostCronLog")
  action(type="omfile" DynaFile="RemoteServiceCronLog")
  stop
} else if ($msg contains "pam_unix(cron:session): session closed for user") then {
  action(type="omfile" DynaFile="RemoteHostCronLog")
  action(type="omfile" DynaFile="RemoteServiceCronLog")
  stop
}


#  Default rules for rsyslog.
#
#			For more information see rsyslog.conf(5) and /etc/rsyslog.conf

#
# First some standard log files.  Log by facility.
#
auth,authpriv.*			/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
#cron.*				/var/log/cron.log
#daemon.*			-/var/log/daemon.log
kern.*				-/var/log/kern.log
#lpr.*				-/var/log/lpr.log
mail.*				-/var/log/mail.log
#user.*				-/var/log/user.log

#
# Logging for the mail system.  Split it up so that
# it is easy to write scripts to parse these files.
#
#mail.info			-/var/log/mail.info
#mail.warn			-/var/log/mail.warn
mail.err			/var/log/mail.err

#
# Logging for INN news system.
#
news.crit			/var/log/news/news.crit
news.err			/var/log/news/news.err
news.notice			-/var/log/news/news.notice

#
# Some "catch-all" log files.
#
#*.=debug;\
#	auth,authpriv.none;\
#	news.none;mail.none	-/var/log/debug
#*.=info;*.=notice;*.=warn;\
#	auth,authpriv.none;\
#	cron,daemon.none;\
#	mail,news.none		-/var/log/messages

#
# Emergencies are sent to everybody logged in.
#
*.emerg                                :omusrmsg:*

#
# I like to have messages displayed on the console, but only on a virtual
# console I usually leave idle.
#
#daemon,mail.*;\
#	news.=crit;news.=err;news.=notice;\
#	*.=debug;*.=info;\
#	*.=notice;*.=warn	/dev/tty8

# The named pipe /dev/xconsole is for the `xconsole' utility.  To use it,
# you must invoke `xconsole' with the `-file' option:
# 
#    $ xconsole -file /dev/xconsole [...]
#
# NOTE: adjust the list below, or you'll go crazy if you have a reasonably
#      busy site..
#
daemon.*;mail.*;\
	news.err;\
	*.=debug;*.=info;\
	*.=notice;*.=warn	|/dev/xconsole
# Ansible managed

#
# Rules for the local system logs
#
$IncludeConfig /etc/rsyslog.d/*.system

#
# Rules for logs incoming from remote hosts
#
ruleset(name="remote") {
  $IncludeConfig /etc/rsyslog.d/*.remote
}

# Ansible managed

#
# Standard log files, split by facility
#
auth,authpriv.*                /var/log/auth.log
*.*;cron,auth,authpriv.none    -/var/log/syslog
cron.*                         -/var/log/cron.log
daemon.*                       -/var/log/daemon.log
kern.*                         -/var/log/kern.log
lpr.*                          -/var/log/lpr.log
mail.*                         -/var/log/mail.log
user.*                         -/var/log/user.log

#
# Copy of the local log files to complete remote logs
#
auth,authpriv.*                ?RemoteHostAuthLog
auth,authpriv.*                ?RemoteServiceAuthLog
*.*;cron,auth,authpriv.none    -?RemoteHostSyslog
cron.*                         -?RemoteHostCronLog
cron.*                         -?RemoteServiceCronLog
mail.*                         -?RemoteServiceMailLog

#
# Logging for the mail system. Split it up so that
# it is easy to write scripts to parse these files
#
mail.info                      -/var/log/mail.info
mail.warn                      -/var/log/mail.warn
mail.err                       /var/log/mail.err

#
# Logging for INN news system
#
news.crit                      /var/log/news/news.crit
news.err                       /var/log/news/news.err
news.notice                    -/var/log/news/news.notice

#
# Some "catch-all" log files
#
*.=debug;\
        auth,authpriv.none;\
        mail,news.none          -/var/log/debug
*.=info;*.=notice;*.=warn;\
        auth,authpriv.none;\
        cron,daemon.none;\
        mail,news.none          -/var/log/messages

#
# Emergencies are sent to everybody logged in
#
*.emerg                         :omusrmsg:*

# Ansible managed

#
# Store remote logs in separate logfiles
#
auth,authpriv.*                     ?RemoteHostAuthLog
auth,authpriv.*                     ?RemoteServiceAuthLog
*.*;cron,auth,authpriv.none         -?RemoteHostSyslog
cron.*                              -?RemoteHostCronLog
cron.*                              -?RemoteServiceCronLog
mail.*                              -?RemoteServiceMailLog

# Log kernel generated UFW log messages to file
:msg,contains,"[UFW " /var/log/ufw.log

# Uncomment the following to stop logging anything that matches the last rule.
# Doing this will stop logging kernel generated UFW log messages to the file
# normally containing kern.* messages (eg, /var/log/kern.log)
#& stop
# Ansible managed

#
# Log messages from remote hosts over UDP
#
input(
  type="imudp"
  port="514"
  ruleset="remote"
)

#
# Log messages from remote hosts over TCP
#
input(
  type="imptcp"
  port="514"
  ruleset="remote"
)

# Ansible managed

#
# This is a workaround to support empty "remote" ruleset on
# older versions of rsyslog package.
# http://comments.gmane.org/gmane.comp.sysutils.rsyslog/15616
#
stop

